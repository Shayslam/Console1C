#Область ОписаниеПеременных

&НаКлиенте
Перем Кэш Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) Экспорт

	ОбработкаОбъект = ЭтаФорма();

	ВерсияОбработки = ОбработкаОбъект.СведенияОВнешнейОбработке().Версия;

	АдресМакета = ПоместитьВоВременноеХранилище(ПолучитьМакет("src"), Новый УникальныйИдентификатор);

	КоллекцияОбщихМодулей = ПолучитьКоллекциюОбщихМодулей();
	АдресОбщихМодулей = СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей);
	ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей);

	БыстрыеПодсказки = Истина;
	ВидимостьКартыКода = Истина;

	Если Не ПустаяСтрока(Параметры.ИмяФайла) Тогда
		ИмяФайлаПриОткрытии = Параметры.ИмяФайла;
	ИначеЕсли Не ПустаяСтрока(Параметры.ТекстПриОткрытии) Тогда
		ТекстПриОткрытии = Параметры.ТекстПриОткрытии;
	КонецЕсли;

	УстановитьКонсольЗапросов(ОбработкаОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) Экспорт

	Если КлючУникальности = Неопределено Тогда
		КлючУникальности = Новый УникальныйИдентификатор;
	КонецЕсли;

	КаталогКонсоли1С = КаталогКонсоли1С();
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтаФорма);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	ОпределитьРазделительПути();
	СППриОткрытии();
	ВкладкиПриОткрытии();

	Если Не ПустаяСтрока(ФайлыТекущаяПапка) Тогда
		ГруппаЛевая("ГруппаЛеваяФайлы");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт

	Если Не ЗавершениеРаботы = Истина Тогда
		ЗакрытьКонсоль();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ГруппаЛевая
#КонецОбласти

#Область СтраницыЛевые

#Область Отладка

&НаКлиенте
Процедура ОтладкаКонфигурацииЗапускаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	Запуск = СтруктураЗапуска(ФайлыТекущаяПапка);
	Если ТипЗнч(Запуск) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить(Запуск);
		Возврат;
	КонецЕсли;

	Элементы.ОтладкаКонфигурацииЗапуска.СписокВыбора.Очистить();
	Для Каждого Конфигурация Из Запуск.Конфигурации Цикл
		Элементы.ОтладкаКонфигурацииЗапуска.СписокВыбора.Добавить(Конфигурация.Имя);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ГруппаСредняя

#Область СтраницыВкладки

&НаКлиенте
Процедура СтраницыВкладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ВкладкаОткрыть();
КонецПроцедуры

&НаКлиенте
Процедура ВкладкаДекорацияНажатие(Элемент)
	ЗапуститьПриложение("explorer.exe /select, """ + Элемент.Заголовок + """");
КонецПроцедуры

#КонецОбласти

#Область СтраницыКонсоль

#Область ОбработчикиСобытийПоляРедактора

&НаКлиенте
Процедура ConsoleOnReady(Элемент) Экспорт

	Если ИсходникиЗагружены Тогда

		ДокументЗагружен = Истина;

#Если ВебКлиент Тогда
		Если ВебДокументДоступен() Тогда
			ИнициализацияРедактора();
			АктивироватьДополнительныеФункции();
		Иначе
			ПоказатьПредупреждение( , "К сожалению, в веб-клиенте недоступны практически все функции.
									  |Вы можете посмотреть только работу автодополнения и подсказок параметров при наборе кода.");
		КонецЕсли;
#Иначе
			ИнициализацияРедактора();
			АктивироватьДополнительныеФункции();
#КонецЕсли

	КонецЕсли
	;

	ВкладкаОткрыть(ВкладкаТекущая(Вкладки), Ложь, Ложь);

	Если Не ПустаяСтрока(ИмяФайлаПриОткрытии) Тогда
		ВкладкаОткрытьФайл(Новый Файл(ИмяФайлаПриОткрытии));
		ИмяФайлаПриОткрытии = "";
	ИначеЕсли Не ПустаяСтрока(ТекстПриОткрытии) Тогда
		Вкладка = ВкладкаДобавить();
		Вкладка.КодТекст = ТекстПриОткрытии;
		Вкладка.КодОригинальныйТекст = ТекстПриОткрытии;
		ВкладкаОткрыть(Вкладка, Ложь, Ложь);
		ТекстПриОткрытии = Вкладка.Имя;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ConsoleOnClick(Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт

	Если Не ТолькоПросмотр Тогда
		ОбработатьСобытиеРедактора(ДанныеСобытия.Event.eventData1C);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ИсходныйКод

&НаКлиенте
Процедура КаталогИсходногоКодаКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт

	Оповещение = Новый ОписаниеОповещения("ВыборКаталогаИсходногоКодаЗавершение", ЭтаФорма);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = Объект.КаталогИсходногоКодаКонфигурации;
	ДиалогВыбора.Показать(Оповещение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтраницыНижние
#КонецОбласти

#КонецОбласти

#Область СтраницыПравые

#Область СтраницаСинтаксПомощник

&НаКлиенте
Процедура HTMLДокументСформирован(Элемент)

	Документ = Элемент.Документ;
	Если Документ.readyState <> "complete" Тогда
		Возврат;
	КонецЕсли;

	ТекстСтиля = "body 
				 |{
				 |	margin: 5px 5px 5px 5px;
				 |	padding: 0px 0px 0px 0px;
				 |	background: #ffffff; 
				 |	color: #000000;
				 |	font-family: Tahoma, Arial, Helvetica, sans-serif;
				 |	font-size: 80%;
				 |	width: 98%;
				 |}
				 |
				 |table
				 |{
				 |	font-size: 100%;
				 |}
				 |
				 |p
				 |{
				 |	margin-top: 0em;	
				 |}
				 |
				 |.V8SH_pagetitle     { display: none }
				 |.V8SH_title     { background: gainsboro; font-weight: bold }
				 |.V8SH_textarea     { padding: 5px 5px 5px 5px; }
				 |.V8SH_heading     { text-decoration: underline; font-weight: bold }
				 |.V8SH_chapter     { font-weight: bold }
				 |.V8SH_rubric      { text-decoration: underline }
				 |.V8SH_codesample  { font-family: Courier New; background: #e6e6e6 });";

	НовыйСтиль = Элемент.Документ.createElement("style");
	НовыйСтиль.type = "text/css";
	НовыйСтиль.innerText = ТекстСтиля;
	Документ.head.appendChild(НовыйСтиль);

	ДобавитьОбработчик Документ.onclick, HTMLonclick;
	
	// Для старых версий
	//ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//ИмяФайлаСтилей = ПолучитьИмяВременногоФайла("css");
	//ТекстовыйДокумент.Записать(ИмяФайлаСтилей);
	//Документ.createStyleSheet(ИмяФайлаСтилей);

	// Посмотрим на картинки
	//Если Документ.All <> Неопределено Тогда
	//	Для Каждого Элемент Из Документ.All Цикл
	//		Если НРег(Элемент.tagName) = "img" И Не ПустаяСтрока(Элемент.href) Тогда
	//			Если Найти(Элемент.outerHTML, "v8help://" + СППространство + "/") > 0 Тогда
	//				Элемент.outerHTML = СтрЗаменить(Элемент.outerHTML, "v8help://" + СППространство + "/", "");
	//				ПутьККартинке = Сред(Элемент.href, СтрДлина("v8help://" + СППространство) + 2);
	//				СПИзвлечьИзFileStorage(ПутьККартинке);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция HTMLonclick(Событие)

	srcElement = Событие.srcElement;
	Если srcElement.tagName = "A" И Не ПустаяСтрока(srcElement.href) Тогда

		Номер = Найти(srcElement.href, "#"); // Относительная ссылка в документе

		Если Не (Номер > 0) Тогда // Иначе ничего не делаем, все работает автоматически

			Префикс = "v8help://" + СППространство;
			ДлинаПрефикса = СтрДлина(Префикс);

			Если Лев(srcElement.href, ДлинаПрефикса) = Префикс Тогда // Пытаемся открыть ссылку в текущем справочном файле
				СПОтобразитьHTML(Сред(srcElement.href, ДлинаПрефикса + 1));
				Возврат Ложь;

			ИначеЕсли Лев(srcElement.href, 29) = "v8help://SyntaxHelperLanguage" Тогда // Эксклюзивная обработка
				СПИмяФайлаСправки = "shlang_ru";
				СПОтобразитьHTML(Сред(srcElement.href, 30));
				Возврат Ложь;

			ИначеЕсли srcElement.protocol = "file:" Тогда // Относительный путь к файлу
				Путь = "file:///" + СтрЗаменить(СПКаталог, "\", "/") + СПИмяФайлаСправки + "/FileStorage/";
				ОтносительныйПуть = Сред(srcElement.href, СтрДлина(Путь) - 3);
				ОтносительныйПуть = СтрЗаменить(ОтносительныйПуть, "%20", " ");
				СПОтобразитьHTML(ОтносительныйПуть);
				Возврат Ложь;

			ИначеЕсли Лев(srcElement.href, 9) = "v8help://" Тогда // Новое пространство
				Сообщить("Новое пространство: " + srcElement.href);
				Возврат Ложь;

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыДерево

&НаКлиенте
Процедура ФайлыДеревоПриИзменении(Элемент)

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	ТекущиеДанные = Элементы.ФайлыДерево.ТекущиеДанные;
	Строка = ФайлыДеревоСтрокаДобавления(ТекущиеДанные);
	Строка.ИндексКартинки = 2;
	Строка.ЭтоФайл = Истина;
	Элементы.ФайлыДерево.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	Элементы.ФайлыДерево.ИзменитьСтроку();

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДеревоПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОбУдаленииВкладки", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, "Вы действительно хотите удалить выделенные файлы?", РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ФайлыДерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЭтоФайл Тогда
			ВкладкаОткрытьФайл(Новый Файл(ТекущиеДанные.ПолноеИмя));
		Иначе
			Элементы.ФайлыДерево.Развернуть(ТекущиеДанные.ПолучитьИдентификатор(), Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоФайловПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ФайлыДерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоФайл Тогда
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДеревоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элементы.ФайлыДерево.ТекущиеДанные;
	ФайлыДеревоТемп = ТекущиеДанные.ПолноеИмя;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДеревоПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ТекущиеДанные = Элементы.ФайлыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(ТекущиеДанные.Имя) Тогда
		ПослеВопросаОбУдаленииВкладки(КодВозвратаДиалога.Да, Неопределено);
		Возврат;
	КонецЕсли;

	НедопустимыеСимволы = НайтиНедопустимыеСимволыВИмениФайла(ТекущиеДанные.Имя);
	Если НедопустимыеСимволы.Количество() > 0 Тогда
		Сообщить("В имени недопустимые символы: " + СтрСоединить(НедопустимыеСимволы, ", "));
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущиеДанныеРодитель = Неопределено Тогда
		Файл = Новый Файл(ФайлыТекущаяПапка + РазделительПути + ТекущиеДанные.Имя);
	Иначе
		Файл = Новый Файл(ТекущиеДанныеРодитель.ПолноеИмя + РазделительПути + ТекущиеДанные.Имя);
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Файл);
	Отказ = Не ФайлыДеревоПереместитьФайлКаталог(ТекущиеДанные, Файл);

	Если Не Отказ Тогда
		ПодключитьОбработчикОжидания("ФайлыДеревоСортироватьОбработчик", 0.1, Истина);
		ФайлыДеревоТемп = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;
	Приемник = ФайлыДерево.НайтиПоИдентификатору(Строка);
	ПриемникРодитель = Приемник.ПолучитьРодителя();

	Для Каждого ИдентификаторСтроки Из ПараметрыПеретаскивания.Значение Цикл

		ТекущиеДанные = ФайлыДерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтруктураВозврата = Неопределено;
		Результат = ФайлыДеревоПеретаскиваниеСтроки(Приемник, ПриемникРодитель, ТекущиеДанные, СтруктураВозврата);

		Если Не Результат Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураВозврата);
			Прервать;
		КонецЕсли;

	КонецЦикла;

	ФайлыДеревоОбновить(Новый Файл(ФайлыТекущаяПапка), Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСПДерево

&НаКлиенте
Процедура СПДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СПДерево.ТекущиеДанные;
	СПИмяФайлаСправки = ТекущиеДанные.ИмяФайлаСправки;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СПОтобразитьHTML(ТекущиеДанные.ПутьКHTML);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасширенияТаблица

&НаКлиенте
Процедура РасширенияТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Список = Элементы.РасширенияТаблица.ТекущиеДанные.Пути;
	ОткрытьРасширение(Список.ВыгрузитьЗначения());

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КоманднаяПанель

#Область ПодменюФайл

&НаКлиенте
Процедура КоманднаяПанельФайлСоздатьФайл(Команда) Экспорт
	ВкладкаДобавить(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФайлНовоеОкно(Команда) Экспорт
	ОткрытьФорму("ВнешняяОбработка.Консоль1С.Форма", , , Истина);
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФайлОткрытьФайл(Команда) Экспорт
	ЗагрузитьКодИзФайла();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФайлОткрытьПапку(Команда)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Диалог.Выбрать() Тогда

		ФайлыРабочаяОбласть = "";
		ВкладкиЗакрытьПапку(Ложь);

		ФайлыТекущаяПапка = Диалог.Каталог;
		ФайлКаталог = Новый Файл(ФайлыТекущаяПапка);
		ФайлыРабочаяОбласть = ФайлыРабочаяОбласть(ФайлКаталог.ПолноеИмя);

		Заголовок = ФайлыТекущаяПапка;

		ВкладкиКаталогДанных();
		ВкладкиПрочитать();
		ВкладкаОткрыть(ВкладкаТекущая(Вкладки), Ложь, Ложь);

		ФайлыДеревоОбновить(ФайлКаталог);

		Если Не Элементы.СтраницыЛевые.Видимость Тогда
			ГруппаЛевая("ГруппаЛеваяФайлы");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФайлЗакрытьПапку(Команда)

	Заголовок = "Консоль 1С";

	ФайлыДерево.ПолучитьЭлементы().Очистить();
	ФайлыТекущаяПапка = "";
	ФайлыРабочаяОбласть = "";
	ВкладкиЗакрытьПапку();

	Элементы.СтраницыЛевые.Видимость = Ложь;
	Элементы.ГруппаЛевая.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФайлСохранить(Команда) Экспорт
	ВкладкаСохранить();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФайлСохранитьКак(Команда) Экспорт
	ВыполнитьВыборФайлаИСохранение(Ложь);
КонецПроцедуры

#КонецОбласти

#Область ПодменюПравка

&НаКлиенте
Процедура КоманднаяПанельПравкаВставитьПроцедурыФормы(Команда)

	Текст = Символы.ПС + "&НаСервере
						 |Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
						 |	
						 |	
						 |	
						 |КонецПроцедуры
						 |
						 |&НаКлиенте
						 |Процедура ПриОткрытии(Отказ)
						 |	
						 |	
						 |	
						 |КонецПроцедуры";

	УстановитьТекст(Текст);

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаКонструкторЗапроса(Команда) Экспорт

	ВызватьКонструкторЗапроса(View().getQuery());

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаЗаменитьВхождения(Команда) Экспорт

	КомандаРедактора("editor.action.changeAll");

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаСравнитьСОригиналом(Команда) Экспорт

	Элементы.КоманднаяПанельПравкаСравнитьСОригиналом.Видимость = Ложь;
	Элементы.КоманднаяПанельПравкаОтключитьРежимСравнения.Видимость = Истина;
	ПрочитатьКодИзСохраненногоФайла(ИмяСохраненногоФайла, "СравнитьСОригиналомЧтениеЗавершение");

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаОтключитьРежимСравнения(Команда) Экспорт

	Элементы.КоманднаяПанельПравкаСравнитьСОригиналом.Видимость = Истина;
	Элементы.КоманднаяПанельПравкаОтключитьРежимСравнения.Видимость = Ложь;
	Элементы.ПодменюПравкаСравнениеУправление.Видимость = Ложь;
	View().compare();
	View().setOriginalText(ОригинальныйКод);
	View().setReadOnly(ТолькоПросмотр);

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаСледующееРасхождение(Команда) Экспорт

	View().nextDiff();

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаПредыдущееРасхождение(Команда) Экспорт

	View().previousDiff();

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаДобавитьПереносСтроки(Команда) Экспорт
	View().addWordWrap();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаУдалитьПереносСтроки(Команда) Экспорт
	View().removeWordWrap();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаЗагрузитьПользовательскиеСниппеты(Команда) Экспорт

	JSON = ПолучитьТекстМакета("ПользовательскиеСниппеты", Истина);
	Результат = View().updateSnippets(JSON);

	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		СообщитьПользователю("Пользовательские сниппеты успешно загружены!");
	Иначе
		ВывестиОшибку("Не удалось загрузить сниппеты: " + Символы.ПС + Результат.errorDescription, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаЗагрузитьСниппетыИзФайла(Команда) Экспорт

	Оповещение = Новый ОписаниеОповещения("ВыборФайлаШаблонаЗавершение", ЭтаФорма);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр = "Шаблоны 1С|*.st";
	ДиалогВыбора.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаЗагрузитьПользовательскиеОбъекты(Команда) Экспорт

	Объекты = ПолучитьПользовательскиеОбъекты();

	Если Объекты <> Неопределено Тогда

		Результат = View().updateMetadata(Объекты);

		Если ТипЗнч(Результат) = Тип("Булево") Тогда
			СообщитьПользователю("Пользовательские объекты успешно загружены!");
		Иначе
			ВывестиОшибку("Не удалось загрузить пользовательские объекты: " + Символы.ПС + Результат.errorDescription,
						  Ложь);
		КонецЕсли;

	Иначе

		Ошибка = "Не удалось получить пользовательские объекты, видимо в конфигурации нет справочников или документов";
		ВывестиОшибку(Ошибка, Ложь);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаЯзыкПодсказок(Команда) Экспорт

	View().switchLang();
	АнглийскийЯзык = Не АнглийскийЯзык;
	УправлениеЯзыкомПодсказок();

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаПереключениеРежимаЗапроса(Команда) Экспорт

	Если Не РежимЗапроса Тогда

		Если ЕстьКод() Тогда
			Оповещение = Новый ОписаниеОповещения("ВопросЗаменыКодаЗапросом", ЭтаФорма);
			ТекстВопроса = "При переключении в режим запроса текущий код будет очищен. Всё равно продолжить?";
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;

	КонецЕсли;

	РежимЗапроса = Не РежимЗапроса;

	ПереключитьРежимЗапроса();

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаПоказатьПользовательскиеПодсказки(Команда) Экспорт

#Если Не ВебКлиент Тогда

	Подсказка1 = СтруктураПодсказки("Подсказка №1",
									"Подсказка №1 вставляемый текст",
									"Class",
									"Расширенная подсказка #1",
									"Документация #1");
	Подсказка2 = СтруктураПодсказки("Подсказка №2",
									"Подсказка №2 ()",
									"Method",
									"Расширенная подсказка #2",
									"Документация #2");
	Подсказка3 = СтруктураПодсказки("Подсказка №3",
									"Подсказка №3",
									"Struct",
									"Расширенная подсказка #3",
									"Документация #3");

	Подсказки = Новый Структура;
	Подсказки.Вставить("Подсказка1", Подсказка1);
	Подсказки.Вставить("Подсказка2", Подсказка2);
	Подсказки.Вставить("Подсказка3", Подсказка3);

	Файл = Новый ЗаписьJSON;
	Файл.УстановитьСтроку();
	ЗаписатьJSON(Файл, Подсказки);
	JSON = Файл.Закрыть();

	View().showCustomSuggestions(JSON);

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаИзменитьРазмерШрифта(Команда) Экспорт

	View().setFontSize(20);

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПравкаЗагрузитьПользовательскиеФункции() Экспорт

	JSON = ПолучитьТекстМакета("ПользовательскиеФункции", Истина);
	Результат = View().updateCustomFunctions(JSON);

	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		СообщитьПользователю("Пользовательские функции успешно загружены!");
	Иначе
		Ошибка = "Не удалось загрузить пользовательские функции: " + Символы.ПС + Результат.errorDescription;
		ВывестиОшибку(Ошибка, Ложь);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПодменюВид

&НаКлиенте
Процедура КоманднаяПанельВидТолькоПросмотр(Команда) Экспорт

	ТолькоПросмотр = Не ТолькоПросмотр;
	View().setReadOnly(ТолькоПросмотр);
	УправлениеВозможностьюРедактирования();

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВидБыстрыеПодсказки(Команда) Экспорт

	БыстрыеПодсказки = Не БыстрыеПодсказки;
	View().enableQuickSuggestions(БыстрыеПодсказки);
	УправлениеБыстрымиПодсказками();

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВидПодсвечиватьЗапросы(Команда) Экспорт

	ПодсвечиватьЗапросы = Не ПодсвечиватьЗапросы;
	Элементы.КоманднаяПанельВидПодсвечиватьЗапросы.Пометка = ПодсвечиватьЗапросы;
	ИмяТемы = ПолучитьИмяТемы() + ?(ПодсвечиватьЗапросы, "-query", "");
	ПереключитьТему(ИмяТемы);

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВидКартаКода(Команда) Экспорт

	ВидимостьКартыКода = Не ВидимостьКартыКода;
	УправлениеВидимостьюКартыКода();

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВидСтрокаСостояния(Команда) Экспорт

	ВидимостьСтрокиСостояния = Не ВидимостьСтрокиСостояния;
	УправлениеВидимостьюСтрокиСостояния();

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВидОтображатьПробелыИТабуляции(Команда) Экспорт

	ОтображатьПробелыИТабуляции = Не ОтображатьПробелыИТабуляции;
	View().showStatusBar();
	УправлениеВидимостьюПробеловТабуляций();

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВидУправлениеТемами(Команда) Экспорт

	УстановитьПометкуТемы(Команда.Имя);
	ИмяТемы = ПолучитьИмяТемы();
	ПереключитьТему(ИмяТемы);

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВидУправлениеРежимами(Команда) Экспорт

	ИмяРежима = ПолучитьИмяРежима(Команда.Имя);
	ПереключитьРежим(ИмяРежима);

КонецПроцедуры

#КонецОбласти

#Область ПодменюПереход

&НаКлиенте
Процедура ПереходПоказатьОбработкуВПроводнике(Команда)

	ПолноеИмя = Объект.ПолноеИмяОбработки;
	Файл = Новый Файл(ПолноеИмя);

	Если Файл.Существует() Тогда
		ЗапуститьПриложение("explorer.exe /select, """ + ПолноеИмя + """");
	Иначе
		Сообщить("Обработка открыта из временного хранилища 1С.");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереходПоказатьРабочуюОбластьВПроводнике(Команда)

	Если Не ПустаяСтрока(ФайлыРабочаяОбласть) Тогда
		Файл = Новый Файл(ФайлыРабочаяОбласть);
		Если Файл.Существует() Тогда
			ЗапуститьПриложение("explorer.exe /select, """ + Файл.ПолноеИмя + """");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереходПереоткрытьОбработку(Команда)

	ПолноеИмя = Объект.ПолноеИмяОбработки;
	Файл = Новый Файл(ПолноеИмя);

	Если Файл.Существует() Тогда
		ОбработкаДД = Новый ДвоичныеДанные(ПолноеИмя);
		АдресОбработки = ПоместитьВоВременноеХранилище(ОбработкаДД, Новый УникальныйИдентификатор);
	Иначе
		АдресОбработки = ПолноеИмя;
	КонецЕсли;

	ИмяЭтойОбработки = ПодключитьОбработку(ПолноеИмя, АдресОбработки);

	Если Не ПустаяСтрока(ИмяЭтойОбработки) Тогда
		ЗакрытьКонсоль();
		ОткрытьФорму("ВнешняяОбработка." + ИмяЭтойОбработки + ".Форма", , , Новый УникальныйИдентификатор);
	Иначе
		Сообщить("Не удалось подключить обработку.");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПодменюВыполнить

&НаКлиенте
Процедура КоманднаяПанельВыполнитьЗапуститьБезКонфигурации(Команда)

	ТекущийРежим = View().getCurrentLanguageId();
	
	Если ТекущийРежим = "bsl" Тогда
		ИмяОбработки = СформироватьОбработку(Новый Структура, , ПолучитьТекстДляОбработки());
		ВыполнитьКодЧерезОбработкуСРасчетомПеременных(ИмяОбработки);
	ИначеЕсли ТекущийРежим = "bsl_query" Тогда
		Результат = ВыполнитьЗапрос(ПолучитьТекст());
		ОбновитьЗамер();
		ОбработатьРезультатВыполнения(Результат);
	Иначе
		Сообщить("Выполнение без конфигурации возможно только в режиме ""Кода"" или ""Запроса"".");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВыполнитьЗапуститьБезОтладки(Команда)

	Запуск = СтруктураЗапуска(ФайлыТекущаяПапка);
	Если ТипЗнч(Запуск) = Тип("Строка") Тогда
		Сообщить(Запуск);
		Возврат;
	КонецЕсли;

	НайтиИВыполнитьКонфигурациюЗапуска(Запуск);

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВыполнитьОткрытьКонфигцрацию(Команда)

	ФайлЗапуска = Новый Файл(ФайлыТекущаяПапка + РазделительПути + ".1СКонсоль" + РазделительПути + "Запуск.bsl");
	Если ФайлЗапуска.Существует() Тогда
		ВкладкаОткрытьФайл(ФайлЗапуска);
	Иначе
		Сообщить("Конфигурации запуска не существует.");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВыполнитьДобавитьКонфигурацию(Команда)

	Если ПустаяСтрока(ФайлыТекущаяПапка) Тогда
		Сообщить("Конфигурации запуска возможны только для рабочей области.");
		Возврат;
	КонецЕсли;

	Файл = Новый Файл(ФайлыТекущаяПапка + РазделительПути + ".1СКонсоль");
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Файл.ПолноеИмя);
		Строка = ФайлыДерево.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Файл);
	Иначе
		ИдСтрока = ФайлыДеревоНайтиТекущуюСтрокуРекурсивно(ФайлыДерево.ПолучитьЭлементы(), Файл.ПолноеИмя);
		Строка = ФайлыДерево.НайтиПоИдентификатору(ИдСтрока);
	КонецЕсли;

	ФайлЗапуска = Новый Файл(Строка.ПолноеИмя + РазделительПути + "Запуск.bsl");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;

	Если Не ФайлЗапуска.Существует() Тогда
		ТекстовыйДокумент.УстановитьТекст(ФайлыТекстЗапускаПоУмолчанию());
		ТекстовыйДокумент.Записать(ФайлЗапуска.ПолноеИмя, КодировкаТекста.UTF8, Символы.ПС);
		СтрокаЗапуска = Строка.ПолучитьЭлементы().Добавить();
		ИдСтрокаЗапуска = СтрокаЗапуска.ПолучитьИдентификатор();
		ЗаполнитьЗначенияСвойств(СтрокаЗапуска, ФайлЗапуска);
	Иначе
		ТекстовыйДокумент.Прочитать(ФайлЗапуска.ПолноеИмя, КодировкаТекста.UTF8, Символы.ПС);
		Текст = ТекстовыйДокумент.ПолучитьТекст();
		Текст = Текст + Символы.ПС + Символы.ПС + ФайлыТекстЗапускаПоУмолчаниюДобавочный();
		ТекстовыйДокумент.УстановитьТекст(Текст);
		ТекстовыйДокумент.Записать(ФайлЗапуска.ПолноеИмя, КодировкаТекста.UTF8, Символы.ПС);
		ИдСтрокаЗапуска = ФайлыДеревоНайтиТекущуюСтрокуРекурсивно(ФайлыДерево.ПолучитьЭлементы(), ФайлЗапуска.ПолноеИмя);
	КонецЕсли;

	Элементы.ФайлыДерево.ТекущаяСтрока = ИдСтрокаЗапуска;
	ФайлыДеревоОбновить(Новый Файл(ФайлыТекущаяПапка), Истина);
	ВкладкаОткрытьФайл(ФайлЗапуска, ТекстовыйДокумент);

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВыполнитьВыполнитьНаКлиенте(Команда) Экспорт

	Если СохранятьКодПриВыполнении Тогда
		СохранитьКодВФайл();
	КонецЕсли;

	Код = ПолучитьТекст(Истина);
	Результат = ВыполнитьКод(Код, ПоказыватьЗначенияПеременныхПослеВыполнения, ЗамерПроизводительности);
	ОбновитьЗамер();
	ОбработатьРезультатВыполнения(Результат);

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВыполнитьВыполнитьНаСервере(Команда) Экспорт

	Если СохранятьКодПриВыполнении Тогда
		СохранитьКодВФайл();
	КонецЕсли;

	Код = ПолучитьТекст(Истина);
	Результат = ВыполнитьКодНаСервере(Код, ПоказыватьЗначенияПеременныхПослеВыполнения, ЗамерПроизводительности);
	ОбновитьЗамер();
	ОбработатьРезультатВыполнения(Результат);

КонецПроцедуры

#КонецОбласти

#Область ПодменюСправка

&НаКлиенте
Процедура КоманднаяПанельСправкаОбОбработке(Команда)

	ТекстСведений = СправкаОбОбработке();
	ПоказатьПредупреждение( , ТекстСведений, , "Сведения о внешней обработке");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КоманднаяПанельВидимостьСтраниц

&НаКлиенте
Процедура КоманднаяПанельВидимостьЛевыхСтраниц(Команда)

	Элементы.СтраницыЛевые.Видимость = Не Элементы.СтраницыЛевые.Видимость;
	Элементы.ГруппаЛевая.Видимость = Не Элементы.СтраницыЛевые.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВидимостьНижнихСтраниц(Команда)
	Элементы.СтраницыНижние.Видимость = Не Элементы.СтраницыНижние.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВидимостьПравыхСтраниц(Команда)
	Элементы.СтраницыПравые.Видимость = Не Элементы.СтраницыПравые.Видимость;
КонецПроцедуры

#КонецОбласти

#Область ГруппаЛевая

&НаКлиенте
Процедура ГруппаЛеваяФайлы(Команда)
	ГруппаЛевая(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЛеваяПоиск(Команда)
	ГруппаЛевая(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЛеваяОтладка(Команда)
	ГруппаЛевая(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЛеваяРасширения(Команда)
	ГруппаЛевая(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЛеваяПользователь(Команда)
	ГруппаЛевая(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЛеваяПараметры(Команда)
	ГруппаЛевая(Команда.Имя);
КонецПроцедуры

#КонецОбласти

#Область СтраницыЛевые

#Область Файлы

&НаКлиенте
Процедура ФайлыДеревоСоздатьКаталог(Команда)

	ТекущиеДанные = Элементы.ФайлыДерево.ТекущиеДанные;
	Строка = ФайлыДеревоСтрокаДобавления(ТекущиеДанные);
	Элементы.ФайлыДерево.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	Элементы.ФайлыДерево.ИзменитьСтроку();

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДеревоОбновитьДерево(Команда)

	Если Не ПустаяСтрока(ФайлыТекущаяПапка) Тогда
		ФайлыДеревоОбновить(Новый Файл(ФайлыТекущаяПапка), Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДеревоОткрытьВПроводнике(Команда)

	ТекущиеДанные = Элементы.ФайлыДерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЭтоФайл Тогда
			ЗапуститьПриложение("explorer.exe /select, """ + ТекущиеДанные.ПолноеИмя + """");
		Иначе
			ЗапуститьПриложение(ТекущиеДанные.ПолноеИмя);
		КонецЕсли;
	Иначе
		ЗапуститьПриложение(ФайлыТекущаяПапка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДеревоСкопироватьПуть(Команда)

	ТекущиеДанные = Элементы.ФайлыДерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОбъектКопирования = Новый COMОбъект("htmlfile");
		ОбъектКопирования.ParentWindow.ClipboardData.SetData("Text", ТекущиеДанные.ПолноеИмя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДеревоСкопироватьОтносительныйПуть(Команда)

	ТекущиеДанные = Элементы.ФайлыДерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИмяДляКопирования = СтрЗаменить(ТекущиеДанные.ПолноеИмя, ФайлыТекущаяПапка, "");
		ОбъектКопирования = Новый COMОбъект("htmlfile");
		ОбъектКопирования.ParentWindow.ClipboardData.SetData("Text", ИмяДляКопирования);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДеревоСкопировать(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

#Область Параметры

&НаКлиенте
Процедура ПараметрыЗагрузитьОбщиеМодули(Команда) Экспорт

	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();

	Если ЗначениеЗаполнено(КаталогИсходногоКода) Тогда

		КаталогМодулей = КаталогИсходногоКода + "CommonModules";
		КаталогНаДиске = Новый Файл(КаталогМодулей);

		Если КаталогНаДиске.Существует() Тогда
			ПараметрыЗагрузки = Новый Структура("КаталогМодулей", КаталогМодулей);
			Оповещение = Новый ОписаниеОповещения("ВопросЗагрузкиОбщихМодулейЗавершение", ЭтаФорма, ПараметрыЗагрузки);
			ТекстВопроса = "Загрузка всех общих модулей может занять длительное время
						   |и потребовать значительных ресурсов памяти. Всё равно продолжить?";
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ГруппаСредняя

#Область ГруппаВкладки

&НаКлиенте
Процедура ВкладкиДобавить(Команда)
	ВкладкаДобавить();
КонецПроцедуры

&НаКлиенте
Процедура ВкладкиЗакрыть(Команда)
	ВкладкаЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура ВкладкиНалево(Команда)
	ВкладкаПереместить(Элементы.СтраницыВкладки.ТекущаяСтраница.Имя, "Налево");
КонецПроцедуры

&НаКлиенте
Процедура ВкладкиНаправо(Команда)
	ВкладкаПереместить(Элементы.СтраницыВкладки.ТекущаяСтраница.Имя, "Направо");
КонецПроцедуры

&НаКлиенте
Процедура ПодменюПараметрыВкладкиЗакрытьВсеВкладки(Команда)
	ВкладкиЗакрытьВсе();
КонецПроцедуры

&НаКлиенте
Процедура ПодменюПараметрыВкладкиЗакрытьВсеСохраненные(Команда)
	ВкладкиЗакрытьВсеСохраненные();
КонецПроцедуры

#КонецОбласти

#Область СтраницыКонсоль
#КонецОбласти

#Область СтраницыНижние
#КонецОбласти

#КонецОбласти

#Область СтраницыПравые

#Область СтраницаСинтаксПомощник

&НаКлиенте
Процедура СПОткрыть(Команда)

	Элементы.СтраницыПравые.Видимость = Истина;
	Элементы.СтраницаСинтаксПомощник.Видимость = Истина;

	Если СПДерево.ПолучитьЭлементы().Количество() = 0 Тогда
		СППрочитать(КаталогПрограммы() + "shlang_ru.hbk");
		СППрочитать(КаталогПрограммы() + "shcntx_ru.hbk");
	КонецЕсли;

	Элементы.СтраницыПравые.ТекущаяСтраница = Элементы.СтраницаСинтаксПомощник;

КонецПроцедуры

&НаКлиенте
Процедура СПВперед(Команда)

	Если Не ЗначениеЗаполнено(СПИстория) Тогда
		Возврат;
	КонецЕсли;

	ЭлементИстории = СПИстория[СПТекущийИндексИстории];
	Если СПТекущийИндексИстории + 1 <= СПИстория.Количество() - 1 Тогда
		ЭлементИстории = СПИстория[СПТекущийИндексИстории + 1];
		СПТекущийИндексИстории = СПТекущийИндексИстории + 1;
		СПИмяФайлаСправки = ЭлементИстории.Представление;
		СПОтобразитьHTML(ЭлементИстории.Значение, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СПНазад(Команда)

	Если Не ЗначениеЗаполнено(СПИстория) Тогда
		Возврат;
	КонецЕсли;

	ЭлементИстории = СПИстория[СПТекущийИндексИстории];
	Если СПТекущийИндексИстории - 1 >= 0 Тогда
		ЭлементИстории = СПИстория[СПТекущийИндексИстории - 1];
		СПТекущийИндексИстории = СПТекущийИндексИстории - 1;
		СПИмяФайлаСправки = ЭлементИстории.Представление;
		СПОтобразитьHTML(ЭлементИстории.Значение, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СПНайтиВСправке(Команда)

	РезультатПоиска = СПНайтиВСправкеРекурсивно(СПДерево.ПолучитьЭлементы(), "/" + СППутьКHTMLФайлу);

	Если РезультатПоиска <> Неопределено Тогда
		Элементы.СПДерево.ТекущаяСтрока = РезультатПоиска;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СППоискПоСправке(Команда)

	Если Элементы.СтраницыПравые.Видимость = Ложь Или Элементы.СтраницаСинтаксПомощник.Видимость = Ложь Тогда
		СПОткрыть(Команды.Найти("СПОткрыть"));
	КонецЕсли;

	СПОчиститьСтрокуПоиска();

	Текст = View().selectedText();
	Если ПустаяСтрока(Текст) Тогда

		ТекущаяСтрока = View().getCurrentLineContent();
		Колонка = View().getCurrentColumn();
		ЛевСтрока = Сред(ТекущаяСтрока, 1, Колонка - 1);
		ПравСтрока = Сред(ТекущаяСтрока, Колонка);
		ВсеСимволыПеременной = СПВсеСимволыПеременной();
		ЛевЧастьПерем = "";
		ПравЧастьПерем = "";
		
		// Находим левую и правую части
		Инд = СтрДлина(ЛевСтрока);
		Пока СтрНайти(ВсеСимволыПеременной, Сред(ЛевСтрока, Инд, 1)) > 0 И Инд > 0 Цикл
			ЛевЧастьПерем = Сред(ЛевСтрока, Инд, 1) + ЛевЧастьПерем;
			Инд = Инд - 1;
		КонецЦикла;

		Инд = 1;
		ПравДлина = СтрДлина(ПравСтрока);
		Пока СтрНайти(ВсеСимволыПеременной, Сред(ПравСтрока, Инд, 1)) > 0 И Инд <= ПравДлина Цикл
			ПравЧастьПерем = ПравЧастьПерем + Сред(ПравСтрока, Инд, 1);
			Инд = Инд + 1;
		КонецЦикла;

		Текст = ЛевЧастьПерем + ПравЧастьПерем;

	КонецЕсли;

	Если Не ПустаяСтрока(Текст) Тогда
		СПНажатьКлавишуПрограммно(Текст);
		СПНажатьКлавишуПрограммно(""); // Нажимаем Энтер, чтобы открыть страницу
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеКоманднаяПанель

#Область СлужебныеПодменюВыполнить

&НаКлиенте
Процедура НайтиИВыполнитьКонфигурациюЗапуска(Запуск)

	Элементы.ОтладкаКонфигурацииЗапуска.СписокВыбора.Очистить();
	Для Каждого Конфигурация Из Запуск.Конфигурации Цикл
		Элементы.ОтладкаКонфигурацииЗапуска.СписокВыбора.Добавить(Конфигурация.Имя);
	КонецЦикла;

	Если Запуск.Конфигурации.Количество() = 1 Тогда
		ОтладкаКонфигурацииЗапуска = Запуск.Конфигурации[0].Имя;
	Иначе
		Если ПустаяСтрока(ОтладкаКонфигурацииЗапуска) Тогда

			Если Не Элементы.СтраницыЛевые.Видимость Тогда
				КоманднаяПанельВидимостьЛевыхСтраниц(Команды.Найти("КоманднаяПанельВидимостьЛевыхСтраниц"));
			КонецЕсли;

			Элементы.СтраницыЛевые.ТекущаяСтраница = Элементы.Отладка;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле = "ОтладкаКонфигурацииЗапуска";
			Сообщение.ПутьКДанным = "ОтладкаКонфигурацииЗапуска";
			Сообщение.Текст = "Выберите конфигурацию запуска.";
			Сообщение.Сообщить();
			Возврат;

		КонецЕсли;
	КонецЕсли;

	КонфигурацияНайдена = Ложь;
	Для Каждого Конфигурация Из Запуск.Конфигурации Цикл
		Если Конфигурация.Имя = ОтладкаКонфигурацииЗапуска Тогда
			КонфигурацияНайдена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не КонфигурацияНайдена Тогда
		Сообщить("Конфигурация """ + ОтладкаКонфигурацииЗапуска + """ не найдена.");
		Возврат;
	КонецЕсли;

	Текст = "";
	Если Конфигурация.Свойство("Файл") Тогда
		ТекстВыполненияФайлВкладка(Конфигурация.Файл, Текст);
	КонецЕсли;

	ТекстМодуляОбъекта = "";
	Если Конфигурация.Свойство("ФайлМодульОбъекта") Тогда
		ТекстВыполненияФайлВкладка(Конфигурация.ФайлМодульОбъекта, ТекстМодуляОбъекта);
	КонецЕсли;

	ВыполнитьКонфигурациюЗапуска(Конфигурация, Текст, ТекстМодуляОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКонфигурациюЗапуска(Конфигурация, Текст, ТекстМодуляОбъекта)

	Если Конфигурация.Тип = "bsl" Тогда
		ВыполнитьКод1С(Конфигурация, Текст);
	ИначеЕсли Конфигурация.Тип = "qbsl" Тогда
		Результат = ВыполнитьЗапрос(Текст);
		ОбновитьЗамер();
		ОбработатьРезультатВыполнения(Результат);
	ИначеЕсли Конфигурация.Тип = "epf" Тогда
		ВыполнитьКодЧерезОбработку(Конфигурация, Текст, ТекстМодуляОбъекта);
	КонецЕсли;

КонецПроцедуры

#Область ВыполнениеКода

&НаКлиенте
Процедура ВыполнитьКод1С(Конфигурация, Текст)

	Если Конфигурация.Контекст = "НаКлиенте" Тогда
		ВыполнитьКод(Текст, Ложь, ЗамерПроизводительности);
		ОбновитьЗамер();
	Иначе
		ВыполнитьКодНаСервере(Текст, Ложь, ЗамерПроизводительности);
		ОбновитьЗамер();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВыполнениеЗапроса

&НаСервере
Функция ВыполнитьЗапрос(ТекстЗапроса)
	
	ОбъектЗапрос = Новый Запрос(ТекстЗапроса);
	ЗамерПроизводительности = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатЗапроса = ОбъектЗапрос.Выполнить().Выгрузить();
	ЗамерПроизводительности = ТекущаяУниверсальнаяДатаВМиллисекундах() - ЗамерПроизводительности;
	
	АдресПеременных = "";
	ДанныеПеременных = Новый Структура("Результат", РезультатЗапроса);
	
	RVS6e6c2a = ПолучитьСтруктуруРезультата();
	RVS6e6c2a.Успешно = Истина;
	RVS6e6c2a.ОписаниеПеременных = ПолучитьОписаниеПеременныхДляВыводВТабло(ДанныеПеременных, АдресПеременных);
	RVS6e6c2a.АдресХраненияПеременных = АдресПеременных;
	
	Возврат RVS6e6c2a;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеЧерезОбработку

&НаКлиенте
Процедура ВыполнитьКодЧерезОбработку(Конфигурация, Текст, ТекстМодуляОбъекта)

	АдресПеременных = ПоместитьВоВременноеХранилище(Новый Массив, Новый УникальныйИдентификатор);
	Текст = ПолучитьТекстДляОбработки(Текст, Истина);
	ТекстМодуляОбъекта = ПолучитьТекстДляОбработки(ТекстМодуляОбъекта, Истина);

	МетодВхода = "";
	Если Не ВыполнитьКодЧерезОбработкуПроверкаКонфигурации(Конфигурация, МетодВхода) Тогда
		Возврат;
	КонецЕсли;

	СтрокаПараметров = "";
	Если Конфигурация.Свойство("ПараметрыМетодаВхода") Тогда
		Для Инд = 0 По Конфигурация.ПараметрыМетодаВхода.Количество() - 1 Цикл
			СтрокаПараметров = СтрокаПараметров + ", Конфигурация.ПараметрыМетодаВхода[" + Инд + "]";
		КонецЦикла;
		СтрокаПараметров = Сред(СтрокаПараметров, 3);
	КонецЕсли;

	ИмяОбработки = СформироватьОбработку(Конфигурация, ТекстМодуляОбъекта, Текст);

	Если (Конфигурация.Свойство("Контекст") И Конфигурация.Контекст = "НаСервере") Или Не Конфигурация.Свойство("Файл") Тогда
		ВыполнитьКодЧерезОбработкуНаСервере(ИмяОбработки, МетодВхода, СтрокаПараметров, ЗамерПроизводительности);
		ОбновитьЗамер();
		Результат = РезультатПеременных(АдресПеременных, ПоказыватьЗначенияПеременныхПослеВыполнения);
		ОбработатьРезультатВыполнения(Результат);
	Иначе
		ВыполнитьКодЧерезОбработкуНаКлиенте(Конфигурация, ИмяОбработки, МетодВхода, СтрокаПараметров);
	КонецЕсли;

	ФайлыДеревоОбновить(Новый Файл(ФайлыТекущаяПапка), Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКодЧерезОбработкуНаКлиенте(Конфигурация, ИмяОбработки, МетодВхода, СтрокаПараметров)

	Если Конфигурация.Свойство("ОткрытиеОбработки") И Конфигурация.ОткрытиеОбработки = Истина Тогда
		УдалитьИзВременногоХранилища(АдресПеременных);
		Если Конфигурация.Свойство("ПараметрыОткрытия") Тогда
			ОткрытьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма", Конфигурация.ПараметрыОткрытия);
		Иначе
			ОткрытьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма");
		КонецЕсли;
	Иначе
		ВыполнитьКодЧерезОбработкуСРасчетомПеременных(ИмяОбработки, МетодВхода, СтрокаПараметров);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьКодЧерезОбработкуНаСервере(ИмяОбработки, МетодВхода, СтрокаПараметров, ЗамерПроизводительности)

	ОбработкаОбъект = ПолучитьОбъект(ИмяОбработки);
	ЗамерПроизводительности = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Выполнить("ОбработкаОбъект." + МетодВхода + "(" + СтрокаПараметров + ")");
	ЗамерПроизводительности = ТекущаяУниверсальнаяДатаВМиллисекундах() - ЗамерПроизводительности;

КонецПроцедуры

#Область ФормированиеОбработки

&НаКлиенте
Функция СформироватьОбработку(Конфигурация, МодульОбъекта = "", МодульФормы = "", ИмяОбработкиРезультат = "")

	Если Конфигурация.Свойство("ИмяШаблонаОбработки") Тогда
		ИмяШаблонаОбработки = СтрЗаменить(Конфигурация.ИмяШаблонаОбработки, "{ТекущаяПапка}", ФайлыТекущаяПапка);
		Файл = Новый Файл(ИмяШаблонаОбработки);
		ИмяКаталогаШаблонаОбработки = ИмяКаталогаШаблонаОбработки( , Файл.ИмяБезРасширения);
		ИмяГотовойОбработки = ИмяГотовойОбработки(Файл.Имя, Конфигурация);
	Иначе
		ИмяШаблонаОбработки = ИмяШаблонаОбработки();
		ИмяКаталогаШаблонаОбработки = ИмяКаталогаШаблонаОбработки();
		ИмяГотовойОбработки = ИмяГотовойОбработки( , Конфигурация);
	КонецЕсли;

	ВыгрузитьШаблон(ИмяШаблонаОбработки, ИмяКаталогаШаблонаОбработки, Конфигурация);

	ИмяКаталогаГотовойОбработки = ИмяКаталогаГотовойОбработки(Ложь);
	СкопироватьФайлы(ИмяКаталогаШаблонаОбработки + РазделительПути, ИмяКаталогаГотовойОбработки);
	ЗаполнитьШаблонОбработки(ИмяКаталогаГотовойОбработки, Конфигурация, МодульОбъекта, МодульФормы);

	КомандаСистемыШел(ИмяУтилиты() + " -B """ + ИмяКаталогаГотовойОбработки() + """ """ + ИмяГотовойОбработки + """",
					  КаталогРазработки());

	ИмяОбработки = ПодключитьШаблонОбработки(ИмяГотовойОбработки, ИмяОбработкиРезультат = "");
	Возврат ИмяОбработки;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Создание обработки

&НаКлиенте
Процедура СкопироватьФайлы(Знач КаталогИсточник, Знач КаталогПриемник)

	Попытка

		МассивФайлов = НайтиФайлы(КаталогИсточник, "*.*", Истина);
		Для Каждого Файл Из МассивФайлов Цикл

			ПолноеИмяИсточник = Файл.ПолноеИмя;
			ПолноеИмяПриемник = КаталогПриемник + СтрЗаменить(Файл.ПолноеИмя, КаталогИсточник, "");

			Если Файл.ЭтоКаталог() Тогда
				СоздатьКаталог(ПолноеИмяПриемник);
			Иначе
				КопироватьФайл(ПолноеИмяИсточник, ПолноеИмяПриемник);
			КонецЕсли;

		КонецЦикла;

	Исключение

		ВызватьИсключение "Ошибка при копировании: "
						  + ОписаниеОшибки()
						  + " (из каталога: "
						  + КаталогИсточник
						  + "; в каталог: "
						  + КаталогПриемник
						  + ")";

	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШаблонОбработки(ИмяКаталогаГотовойОбработки,
								   Конфигурация,
								   ТекстМодуляОбработки = "",
								   ТекстМодуляФормы = "")

	Если Конфигурация.Свойство("ИмяФормы") Тогда
		ИмяФормыОбработки = Конфигурация.ИмяФормы;
	Иначе
		ИмяФормыОбработки = "Форма";
	КонецЕсли;

	ИмяМодуляФормы = ИмяКаталогаГотовойОбработки
					 + "Form"
					 + РазделительПути
					 + ИмяФормыОбработки
					 + РазделительПути
					 + "Form.obj.bsl";

	Файл = Новый Файл(ИмяМодуляФормы);
	Если Файл.Существует() Или Не ПустаяСтрока(ТекстМодуляФормы) Тогда
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.УстановитьТекст(ТекстМодуляФормы);
		ТекстДок.Записать(ИмяМодуляФормы, КодировкаТекста.UTF8, Символы.ПС);
	КонецЕсли;

	ИмяМодуляОбъекта = ИмяКаталогаГотовойОбработки + "ExternalDataProcessor.obj.bsl";
	Файл = Новый Файл(ИмяМодуляОбъекта);
	Если Файл.Существует() Или Не ПустаяСтрока(ТекстМодуляОбработки) Тогда
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.УстановитьТекст(ТекстМодуляОбработки);
		ТекстДок.Записать(ИмяМодуляОбъекта, КодировкаТекста.UTF8, Символы.ПС);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПодключитьШаблонОбработки(ИмяШаблонаОбработки, Знач ИмяОбработкиРезультат = "")

	ШаблонаОбработкиДД = Новый ДвоичныеДанные(ИмяШаблонаОбработки);
	АдресШаблонаОбработки = ПоместитьВоВременноеХранилище(ШаблонаОбработкиДД, Новый УникальныйИдентификатор);

	Если ПустаяСтрока(ИмяОбработкиРезультат) Тогда
		ИмяОбработкиРезультат = ВкладкаТекущая(Вкладки).ФайлИмяБезРасширения;
	КонецЕсли;

	Возврат ПодключитьОбработку(ИмяШаблонаОбработки, АдресШаблонаОбработки, ИмяОбработкиРезультат);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Функция КаталогРазработки()
	Возврат СоздатьКаталогЕслиЕгоНет(КаталогКонсоли1С + "CreateEPF");
КонецФункции

&НаСервере
Функция МакетУтилиты()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьМакет("v8unpackpy");

КонецФункции

&НаСервере
Функция МакетШаблонаОбработки()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьМакет("Code1C");

КонецФункции

&НаКлиенте
Функция ИмяУтилиты()

	Файл = Новый Файл(КаталогРазработки() + "v8unpack.exe");
	Если Не Файл.Существует() Тогда
		МакетУтилиты().Записать(Файл.ПолноеИмя);
	КонецЕсли;

	Возврат Файл.ПолноеИмя;

КонецФункции

&НаКлиенте
Функция ИмяШаблонаОбработки()

	Файл = Новый Файл(КаталогРазработки() + "Code1C.epf");
	Если Не Файл.Существует() Тогда
		МакетШаблонаОбработки().Записать(Файл.ПолноеИмя);
	КонецЕсли;

	Возврат Файл.ПолноеИмя;

КонецФункции

&НаКлиенте
Функция ИмяКаталогаШаблонаОбработки(ДляШела = Истина, ИмяКаталога = "Code1C")

	Файл = Новый Файл(КаталогРазработки() + ИмяКаталога);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Файл.ПолноеИмя);
	КонецЕсли;

	Если ДляШела Тогда
		Возврат Файл.ПолноеИмя;
	Иначе
		Возврат Файл.ПолноеИмя + ПолучитьРазделительПутиКлиента();
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция КаталогГотовыхОбработок()
	Возврат СоздатьКаталогЕслиЕгоНет(КаталогРазработки() + "Bin");
КонецФункции

&НаКлиенте
Функция ИмяГотовойОбработки(ИмяГотовойОбработки = "OkCode1C.epf", Конфигурация = Неопределено)

	Если Конфигурация <> Неопределено И Конфигурация.Свойство("ИмяГотовойОбработки") Тогда
		Возврат СтрЗаменить(Конфигурация.ИмяГотовойОбработки, "{ТекущаяПапка}", ФайлыТекущаяПапка);
	Иначе
		Возврат КаталогГотовыхОбработок() + ИмяГотовойОбработки;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ИмяКаталогаГотовойОбработки(ДляШела = Истина)

	Файл = Новый Файл(КаталогРазработки() + "OkCode1C");
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Файл.ПолноеИмя);
	ИначеЕсли Не ДляШела Тогда
		УдалитьФайлы(Файл.ПолноеИмя);
		СоздатьКаталог(Файл.ПолноеИмя);
	КонецЕсли;

	Если ДляШела Тогда
		Возврат Файл.ПолноеИмя;
	Иначе
		Возврат Файл.ПолноеИмя + ПолучитьРазделительПутиКлиента();
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВыгрузитьШаблон(ИмяШаблонаОбработки, ИмяКаталогаШаблонаОбработки, Конфигурация)

	Если НайтиФайлы(ИмяКаталогаШаблонаОбработки + РазделительПути, "*.*", Ложь).Количество() = 0
		 Или (Конфигурация.Свойство("ВыгружатьШаблонОбработки") И Конфигурация.ВыгружатьШаблонОбработки = Истина) Тогда

		КомандаСистемыШел(ИмяУтилиты() + " -E """ + ИмяШаблонаОбработки + """ """ + ИмяКаталогаШаблонаОбработки + """",
						  КаталогРазработки());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураЗапуска(ФайлыТекущаяПапка)

	Разделитель = ПолучитьРазделительПути();
	ФайлЗапуска = Новый Файл(ФайлыТекущаяПапка + Разделитель + ".1СКонсоль" + Разделитель + "Запуск.bsl");
	Если Не ФайлЗапуска.Существует() Тогда
		Возврат "Конфигурации запуска не существует.";
	КонецЕсли;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлЗапуска.ПолноеИмя, КодировкаТекста.UTF8, Символы.ПС);
	ТекстЗапуска = ТекстовыйДокумент.ПолучитьТекст();

	Запуск = Неопределено;
	Выполнить (ТекстЗапуска);

	Если Запуск = Неопределено Тогда
		Возврат "Конфигурация запуска неопределена.";
	КонецЕсли;

	Возврат Запуск;

КонецФункции

&НаКлиенте
Процедура ТекстВыполненияФайлВкладка(ИмяФайла, Текст)

	ИмяФайлаВыполнения = СтрЗаменить(ИмяФайла, "{ТекущаяПапка}", ФайлыТекущаяПапка);
	Вкладка = ВкладкаПоФайлПолноеИмя(Вкладки, ИмяФайлаВыполнения);
	Если Вкладка = Неопределено Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайлаВыполнения, КодировкаТекста.UTF8, Символы.ПС);
		Текст = ТекстовыйДокумент.ПолучитьТекст();
	Иначе
		Текст = Вкладка.КодТекст;
		Если СохранятьКодПриВыполнении Тогда
			ВкладкаСохранить(ИмяФайлаВыполнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВыполнитьКодЧерезОбработкуПроверкаКонфигурации(Конфигурация, МетодВхода)

	Если Не Конфигурация.Свойство("МетодВхода") И (Не Конфигурация.Свойство("ОткрытиеОбработки")
												   Или Конфигурация.ОткрытиеОбработки = Ложь) Тогда

		Сообщить("Не обнаружено свойство ""МетодВхода"" у конфигурации запуска """ + Конфигурация.Имя + """.");
		Возврат Ложь;
	КонецЕсли;

	Если Конфигурация.Свойство("МетодВхода") Тогда
		МетодВхода = Конфигурация.МетодВхода;
		Если ПустаяСтрока(МетодВхода) Тогда
			Сообщить("Не указан метод входа в конфигурации запуска """ + Конфигурация.Имя + """.");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОбъект(ИмяОбработки)
	Возврат ВнешниеОбработки.Создать(ИмяОбработки, Ложь, Защита());
КонецФункции

&НаКлиенте
Функция ПолучитьТекстДляОбработки(Текст = Неопределено, ИспользоватьСтарыйАдрес = Ложь)

	Если Текст = Неопределено Тогда
		Текст = ПолучитьТекст(Ложь);
	КонецЕсли;

	КодПросмотраПеременных = ПолучитьКодПросмотраПеременных();

	Замены = Новый Массив;

	Замены.Добавить(Символы.ПС + "КонецПроцедуры");
	Замены.Добавить(" КонецПроцедуры");
	Замены.Добавить("	КонецПроцедуры");

	Замены.Добавить(Символы.ПС + "КонецФункции");
	Замены.Добавить(" КонецФункции");
	Замены.Добавить("	КонецФункции");

	Замены.Добавить(Символы.ПС + "Возврат;");
	Замены.Добавить(" Возврат;");
	Замены.Добавить("	Возврат;");

	Замены.Добавить(Символы.ПС + "Возврат ");
	Замены.Добавить(Символы.ПС + "Возврат	");
	Замены.Добавить(Символы.ПС + "Возврат" + Символы.ПС);

	Замены.Добавить(" Возврат ");
	Замены.Добавить(" Возврат	");
	Замены.Добавить(" Возврат" + Символы.ПС);

	Замены.Добавить("	Возврат ");
	Замены.Добавить("	Возврат	");
	Замены.Добавить("	Возврат" + Символы.ПС);

	Если Не ИспользоватьСтарыйАдрес Тогда
		АдресПеременных = ПоместитьВоВременноеХранилище(Новый Массив, Новый УникальныйИдентификатор);
	КонецЕсли;

	Расчет = "SPd201bf6 = Новый Структура;
			 |"
			 + КодПросмотраПеременных
			 + "
			   |_SPd201bf6 = ПолучитьИзВременногоХранилища("""
			 + АдресПеременных
			 + """);
			   |
			   |Попытка
			   |	_SPd201bf6.Добавить(ПоместитьВоВременноеХранилище(SPd201bf6, Новый УникальныйИдентификатор));
			   |	ПоместитьВоВременноеХранилище(_SPd201bf6, """
			 + АдресПеременных
			 + """);
			   |Исключение КонецПопытки;";

	Для Каждого Замена Из Замены Цикл

		Текст = СтрЗаменить(Текст, Замена, Расчет + Замена);

	КонецЦикла;

	Возврат Текст + Символы.ПС + Расчет;

КонецФункции

&НаСервереБезКонтекста
Функция РезультатПеременных(Знач АдресПеременных, ПоказыватьЗначенияПеременныхПослеВыполнения)

	Адреса = ПолучитьИзВременногоХранилища(АдресПеременных);
	SPd201bf6 = Новый Структура;

	Для Каждого Адрес Из Адреса Цикл

		Переменные = ПолучитьИзВременногоХранилища(Адрес);

		Для Каждого КлючИЗначение Из Переменные Цикл
			SPd201bf6.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;

		УдалитьИзВременногоХранилища(Адрес);

	КонецЦикла;

	УдалитьИзВременногоХранилища(АдресПеременных);

	RVS6e6c2a = ПолучитьСтруктуруРезультата();
	RVS6e6c2a.Успешно = Истина;
	АдресПеременных = "";

	Попытка
		Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда
			RVS6e6c2a.ОписаниеПеременных = ПолучитьОписаниеПеременныхДляВыводВТабло(SPd201bf6, АдресПеременных);
		ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда
			RVS6e6c2a.ОписаниеПеременных = ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(SPd201bf6);
		КонецЕсли;
		RVS6e6c2a.АдресХраненияПеременных = АдресПеременных;
	Исключение
		OS6e6c2a = ИнформацияОбОшибке();
		RVS6e6c2a.ОписаниеПеременных = "";
	КонецПопытки;

	Возврат RVS6e6c2a;

КонецФункции

&НаКлиенте
Процедура ВыполнитьКодЧерезОбработкуСРасчетомПеременных(ИмяОбработки, МетодВхода = Неопределено, СтрокаПараметров = "")

	Окна = ПолучитьОкна();
	ТекущееОкно = Неопределено;

	Для Каждого ДанноеОкно Из Окна Цикл
		Если ДанноеОкно.Содержимое.Количество() > 0 И ДанноеОкно.Содержимое.Найти(ЭтаФорма) <> Неопределено Тогда
			ТекущееОкно = ДанноеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ЗамерПроизводительности = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Форма = ОткрытьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма",
						 ,
						 ЭтаФорма,
						 Истина,
						 ТекущееОкно,
						 ,
						 ,
						 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Если МетодВхода <> Неопределено Тогда
		Выполнить("Форма." + МетодВхода + "(" + СтрокаПараметров + ")");
	КонецЕсли;

	ЗамерПроизводительности = ТекущаяУниверсальнаяДатаВМиллисекундах() - ЗамерПроизводительности;
	ОбновитьЗамер();
	Результат = РезультатПеременных(АдресПеременных, ПоказыватьЗначенияПеременныхПослеВыполнения);
	ОбработатьРезультатВыполнения(Результат);

	Если Форма <> Неопределено И Форма.Открыта() Тогда
		Форма.Закрыть();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПодменюСправка

&НаСервере
Функция СправкаОбОбработке()

	ОбОбработке = ЭтаФорма().СведенияОВнешнейОбработке();
	ТекстСведений = "Наименование: "
					+ ОбОбработке.Наименование
					+ " ("
					+ ОбОбработке.Версия
					+ ")"
					+ Символы.ПС
					+ "Вид: "
					+ ОбОбработке.Вид
					+ Символы.ПС
					+ "Назначение: "
					+ ?(ЗначениеЗаполнено(ОбОбработке.Назначение), ОбОбработке.Назначение, "Нет")
					+ Символы.ПС
					+ "Безопасный режим: "
					+ ОбОбработке.БезопасныйРежим
					+ Символы.ПС
					+ "Информация: "
					+ ОбОбработке.Информация
					+ Символы.ПС
					+ Символы.ПС
					+ "Команда:"
					+ Символы.ПС
					+ " 1. Представление: "
					+ ОбОбработке.Команды[0].Представление
					+ ";"
					+ Символы.ПС
					+ " 2. Идентификатор: "
					+ ОбОбработке.Команды[0].Идентификатор
					+ ";"
					+ Символы.ПС
					+ " 3. Использование: "
					+ ОбОбработке.Команды[0].Использование
					+ ";"
					+ Символы.ПС
					+ " 4. Показывать оповещения: "
					+ ОбОбработке.Команды[0].ПоказыватьОповещение
					+ "."
					+ Символы.ПС
					+ " 5. Модификатор: "
					+ ?(ЗначениеЗаполнено(ОбОбработке.Команды[0].Модификатор), ОбОбработке.Команды[0].Модификатор, "Нет")
					+ ".";

	Возврат ТекстСведений;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеГруппаЛевая

&НаКлиенте
Процедура ГруппаЛевая(ИмяКоманды) Экспорт

	ИмяСтраницы = СтрЗаменить(ИмяКоманды, "ГруппаЛевая", "");
	Элементы.СтраницыЛевые.Видимость = Не Элементы.СтраницыЛевые.Видимость;
	Элементы.ГруппаЛевая.Видимость = Не Элементы.СтраницыЛевые.Видимость;
	Элементы.СтраницыЛевые.ТекущаяСтраница = Элементы[ИмяСтраницы];

КонецПроцедуры

#КонецОбласти

#Область СлужебныеСтраницыЛевые

#Область СлужебныеФайлы

#Область ОсновнойИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обновление дерева

&НаКлиенте
Процедура ФайлыДеревоОбновить(Знач ФайлКаталог, СохранитьРазвертку = Ложь)

	Если СохранитьРазвертку Тогда
		СоответствиеРазвертки = ФайлыДеревоСоответствиеРазвертки(Новый Соответствие, ФайлыДерево);
		ТекущаяСтрока = Элементы.ФайлыДерево.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущееПолноеИмя = ФайлыДерево.НайтиПоИдентификатору(ТекущаяСтрока).ПолноеИмя;
		КонецЕсли;
	КонецЕсли;

	ФайлыДерево.ПолучитьЭлементы().Очистить();
	МассивФайлов = НайтиФайлы(ФайлКаталог.ПолноеИмя, "*", Истина);
	МассивСтруктурКаталогов = Новый Массив;
	МассивСтруктурФайлов = Новый Массив;

	Для Каждого Файл Из МассивФайлов Цикл

		СтруктураФайла = Новый Структура;
		СтруктураФайла.Вставить("ЭтоФайл", Файл.Этофайл());
		СтруктураФайла.Вставить("Имя");
		СтруктураФайла.Вставить("ИмяБезРасширения");
		СтруктураФайла.Вставить("ПолноеИмя");
		СтруктураФайла.Вставить("Путь");
		СтруктураФайла.Вставить("Расширение");

		ЗаполнитьЗначенияСвойств(СтруктураФайла, Файл);

		Если Файл.ЭтоФайл() Тогда
			МассивСтруктурФайлов.Добавить(СтруктураФайла);
		Иначе
			МассивСтруктурКаталогов.Добавить(СтруктураФайла);
		КонецЕсли;

	КонецЦикла;

	ОткрытьПапкуНаСервере(МассивСтруктурКаталогов, МассивСтруктурФайлов);

	Если СохранитьРазвертку Тогда
		ФайлыДеревоРазвертка(СоответствиеРазвертки);
		ТекущаяСтрока = ФайлыДеревоНайтиТекущуюСтрокуРекурсивно(ФайлыДерево.ПолучитьЭлементы(), ТекущееПолноеИмя);
		Элементы.ФайлыДерево.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОткрытьПапкуНаСервере(МассивСтруктурКаталогов, МассивСтруктурФайлов)

	ФайлыДеревоСервер = ДанныеФормыВЗначение(ФайлыДерево, Тип("ДеревоЗначений"));

	Для Каждого СтруктураКаталога Из МассивСтруктурКаталогов Цикл
		ЗаполнитьДеревоФайлов(ФайлыДеревоСервер, СтруктураКаталога);
	КонецЦикла;

	Для Каждого СтруктураФайла Из МассивСтруктурФайлов Цикл
		ЗаполнитьДеревоФайлов(ФайлыДеревоСервер, СтруктураФайла);
	КонецЦикла;

	ЗначениеВДанныеФормы(ФайлыДеревоСервер, ФайлыДерево);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоФайлов(ФайлыДеревоСервер, СтруктураФайла)

	Путь = Сред(СтруктураФайла.Путь, 1, СтрДлина(СтруктураФайла.Путь) - 1);
	Строка = ФайлыДеревоСервер.Строки.Найти(Путь, "ПолноеИмя", Истина);

	Если Строка = Неопределено Тогда
		Строка = ФайлыДеревоСервер;
	КонецЕсли;
	
	//Если Путь = Корень.ПолноеИмя Тогда
	//	Строка = Корень;
	//Иначе
	//	Строка = Корень.Строки.Найти(Путь, "ПолноеИмя", Истина);
	//КонецЕсли;

	НоваяСтрока = Строка.Строки.Добавить();
	УстановитьИндексКартинки(НоваяСтрока, СтруктураФайла);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураФайла);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИндексКартинки(Строка, СтруктураФайла)

	Если СтруктураФайла.ЭтоФайл Тогда
		Строка.ИндексКартинки = 2;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ФайлыДеревоПеретаскиваниеСтроки(Знач Приемник, ПриемникРодитель, Знач ТекущиеДанные, СтруктураВозврата)

	Если Приемник.ЭтоФайл Тогда

		Если ПриемникРодитель = Неопределено Тогда
			ПриемникРодитель = ФайлыДерево;
			ПеретаскиваниеНиже = Истина;
		Иначе
			ПеретаскиваниеНиже = СтрНайти(ТекущиеДанные.Путь, ПриемникРодитель.ПолноеИмя + РазделительПути) > 0;
		КонецЕсли;

		Если ПеретаскиваниеНиже Тогда

			Для Каждого СтрокаПриемника Из ПриемникРодитель.ПолучитьЭлементы() Цикл
				Если Не СтрокаПриемника.ЭтоФайл И СтрНайти(ТекущиеДанные.Путь, СтрокаПриемника.ПолноеИмя) > 0 Тогда
					ПриемникПолноеИмя = Сред(СтрокаПриемника.Путь, 1, СтрДлина(СтрокаПриемника.Путь) - 1);
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если ПустаяСтрока(ПриемникПолноеИмя) Тогда
				Возврат Ложь;
			КонецЕсли;

		Иначе
			ПриемникПолноеИмя = ПриемникРодитель.ПолноеИмя;
		КонецЕсли;

	Иначе
		ПеретаскиваниеНиже = СтрНайти(ТекущиеДанные.Путь, Приемник.ПолноеИмя + РазделительПути) > 0;
		Если ПеретаскиваниеНиже Тогда
			Если ПриемникРодитель <> Неопределено Тогда
				ПриемникПолноеИмя = ПриемникРодитель.ПолноеИмя;
			Иначе
				ПриемникПолноеИмя = ФайлыТекущаяПапка;
			КонецЕсли;
		Иначе
			ПриемникПолноеИмя = Приемник.ПолноеИмя;
		КонецЕсли;
	КонецЕсли;

	ФайлыДеревоТемп = ТекущиеДанные.ПолноеИмя;
	Файл = Новый Файл(СтрЗаменить(ТекущиеДанные.ПолноеИмя, ТекущиеДанные.Путь, ПриемникПолноеИмя + РазделительПути));

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Имя", ТекущиеДанные.Имя);
	СтруктураВозврата.Вставить("ИмяБезРасширения", ТекущиеДанные.ИмяБезРасширения);
	СтруктураВозврата.Вставить("ПолноеИмя", ТекущиеДанные.ПолноеИмя);
	СтруктураВозврата.Вставить("Путь", ТекущиеДанные.Путь);
	СтруктураВозврата.Вставить("Расширение", ТекущиеДанные.Расширение);
	СтруктураВозврата.Вставить("ИндексКартинки", ТекущиеДанные.ИндексКартинки);
	СтруктураВозврата.Вставить("ЭтоФайл", ТекущиеДанные.ЭтоФайл);

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Файл);
	Результат = ФайлыДеревоПереместитьФайлКаталог(ТекущиеДанные, Файл);
	ФайлыДеревоТемп = "";

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ФайлыДеревоСортироватьОбработчик() Экспорт

	ТекущаяСтрока = Элементы.ФайлыДерево.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда

		СоответствиеРазвертки = ФайлыДеревоСоответствиеРазвертки(Новый Соответствие, ФайлыДерево);
		ТекущееПолноеИмя = ФайлыДерево.НайтиПоИдентификатору(ТекущаяСтрока).ПолноеИмя;
		ФайлыДеревоСортировать(ТекущаяСтрока);

		ФайлыДеревоРазвертка(СоответствиеРазвертки);
		ТекущаяСтрока = ФайлыДеревоНайтиТекущуюСтрокуРекурсивно(ФайлыДерево.ПолучитьЭлементы(), ТекущееПолноеИмя);
		Элементы.ФайлыДерево.ТекущаяСтрока = ТекущаяСтрока;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ФайлыДеревоСортировать(Идентификатор)

	ФайлыДеревоСервер = ДанныеФормыВЗначение(ФайлыДерево, Тип("ДеревоЗначений"));
	ФайлыДеревоСервер.Строки.Сортировать("ИндексКартинки, Имя", Истина);
	ЗначениеВДанныеФормы(ФайлыДеревоСервер, ФайлыДерево);
	Элементы.ФайлыДерево.ТекущаяСтрока = Идентификатор;

КонецПроцедуры

&НаКлиенте
Функция ФайлыДеревоНайтиТекущуюСтрокуРекурсивно(Строки, Поиск)

	Для Каждого Строка Из Строки Цикл

		РезультатПоиска = ФайлыДеревоНайтиТекущуюСтрокуРекурсивно(Строка.ПолучитьЭлементы(), Поиск);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;

		Если Строка.ПолноеИмя = Поиск Тогда
			Возврат Строка.ПолучитьИдентификатор();
		КонецЕсли;

	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция ФайлыДеревоСоответствиеРазвертки(СоответствиеРазвертки, Строки)

	Для Каждого Строка Из Строки.ПолучитьЭлементы() Цикл
		СоответствиеРазвертки.Вставить(Строка.ПолноеИмя, Элементы.ФайлыДерево.Развернут(Строка.ПолучитьИдентификатор()));
		ФайлыДеревоСоответствиеРазвертки(СоответствиеРазвертки, Строка);
	КонецЦикла;

	Возврат СоответствиеРазвертки;

КонецФункции

&НаКлиенте
Процедура ФайлыДеревоРазвертка(СоответствиеРазвертки)

	Для Каждого ПолноеИмяИРазвернут Из СоответствиеРазвертки Цикл
		Если ПолноеИмяИРазвернут.Значение = Истина Тогда
			ИдентификаторСтроки = ФайлыДеревоНайтиТекущуюСтрокуРекурсивно(ФайлыДерево.ПолучитьЭлементы(),
																		  ПолноеИмяИРазвернут.Ключ);
			Элементы.ФайлыДерево.Развернуть(ИдентификаторСтроки, Ложь);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Функция ФайлыДеревоСтрокаДобавления(ТекущиеДанные)

	Если ТекущиеДанные <> Неопределено Тогда
		Строка = ФайлыДерево.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
		Если ТекущиеДанные.ЭтоФайл Тогда
			Если Строка.ПолучитьРодителя() <> Неопределено Тогда
				Строка = Строка.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
			Иначе
				Строка = ФайлыДерево.ПолучитьЭлементы().Добавить();
			КонецЕсли;
		Иначе
			Строка = Строка.ПолучитьЭлементы().Добавить();
		КонецЕсли;
	Иначе
		Строка = ФайлыДерево.ПолучитьЭлементы().Добавить();
	КонецЕсли;

	Возврат Строка;

КонецФункции

&НаКлиенте
Функция ФайлыДеревоПереместитьФайлКаталог(Знач ТекущиеДанные, Знач Файл)

	Если Не ТекущиеДанные.ЭтоФайл Тогда
		Результат = ПереместитьКаталог(ФайлыДеревоТемп, ТекущиеДанные.ПолноеИмя);
		Если Результат Тогда
			ФайлыДеревоОбновлениеИмениФайлаРекурсивно(ТекущиеДанные, ТекущиеДанные, ФайлыДеревоТемп);
		Иначе
			Возврат Результат;
		КонецЕсли;
	Иначе

		Если Файл.Существует() Тогда
			Если ФайлыДеревоТемп = Файл.ПолноеИмя Тогда
				Возврат Истина;
			КонецЕсли;
			Сообщить("Файл с именем: " + Файл.Имя + " - уже существует!");
			Возврат Ложь;
		КонецЕсли;

		ФайлСтарый = Новый Файл(ФайлыДеревоТемп);
		Если Не ФайлСтарый.Существует() Тогда
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Записать(ТекущиеДанные.ПолноеИмя);
		Иначе
			ПереместитьФайл(ФайлыДеревоТемп, ТекущиеДанные.ПолноеИмя);
		КонецЕсли;

		Если Не ПустаяСтрока(ФайлыДеревоТемп) Тогда
			ФайлыДеревоОбновлениеИмениФайла(Файл, ФайлыДеревоТемп);
		КонецЕсли;

	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ФайлыДеревоОбновлениеИмениФайлаРекурсивно(ИзмененнаяСтрока, ПроверяемаяСтрока, СтароеИмяКаталога)

	Если Не ПустаяСтрока(СтароеИмяКаталога) Тогда
		Файл = Новый Файл(СтрЗаменить(ПроверяемаяСтрока.ПолноеИмя + РазделительПути,
									  СтароеИмяКаталога + РазделительПути,
									  ИзмененнаяСтрока.ПолноеИмя + РазделительПути));
	Иначе
		Возврат;
	КонецЕсли;

	Если ПроверяемаяСтрока.ЭтоФайл Тогда
		ФайлыДеревоОбновлениеИмениФайла(Файл, ПроверяемаяСтрока.ПолноеИмя);
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ПроверяемаяСтрока, Файл);
	Строки = ПроверяемаяСтрока.ПолучитьЭлементы();

	Для Каждого Строка Из Строки Цикл
		ФайлыДеревоОбновлениеИмениФайлаРекурсивно(ИзмененнаяСтрока, Строка, СтароеИмяКаталога);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДеревоОбновлениеИмениФайла(Файл, ПолноеИмяПоиска)

	Вкладка = ВкладкаПоФайлПолноеИмя(Вкладки, ПолноеИмяПоиска);
	Если Вкладка <> Неопределено Тогда

		ВкладкаЗаполнитьДанныеФайла(Вкладка, Файл);

		Элементы[Вкладка.Имя].Заголовок = Вкладка.ФайлИмя + ?(Вкладка.Модифицирована, "  ●", "");
		Элементы[Вкладка.Имя + "Декорация"].Заголовок = Вкладка.ФайлПолноеИмя;

		ПрошлыйАрхивПолноеИмя = Новый Файл(Вкладка.АрхивПолноеИмя);
		ВкладкаАрхивПолноеИмя(Вкладка);

		Если ПрошлыйАрхивПолноеИмя.Существует() Тогда
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ПрошлыйАрхивПолноеИмя.ПолноеИмя);
			ТекстовыйДокумент.Записать(Вкладка.АрхивПолноеИмя);
			УдалитьФайлы(ПрошлыйАрхивПолноеИмя.ПолноеИмя);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбУдаленииВкладки(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Пока Элементы.ФайлыДерево.ВыделенныеСтроки.Количество() > 0 Цикл

			ИдентификаторСтроки = Элементы.ФайлыДерево.ВыделенныеСтроки[0];
			ФайлСтрока = ФайлыДерево.НайтиПоИдентификатору(ИдентификаторСтроки);
			Вкладка = ВкладкаПоФайлПолноеИмя(Вкладки, ФайлСтрока.ПолноеИмя);
			Если Вкладка <> Неопределено И Вкладка.Имя <> "Вкладка0" Тогда
				ВкладкаЗакрыть(Вкладка, Истина);
			КонецЕсли;

			Если Не ПустаяСтрока(ФайлСтрока.ПолноеИмя) Тогда
				УдалитьФайлы(ФайлСтрока.ПолноеИмя);
			КонецЕсли;

			ТекущиеДанныеРодитель = ФайлСтрока.ПолучитьРодителя();
			Если ТекущиеДанныеРодитель <> Неопределено Тогда
				ТекущиеДанныеРодитель.ПолучитьЭлементы().Удалить(ФайлСтрока);
			Иначе
				ФайлыДерево.ПолучитьЭлементы().Удалить(ФайлСтрока);
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

////////////////////////////////////////////////////////////////////////////////
// Рабочая область

&НаКлиенте
Функция ФайлыРабочиеОбласти()
	Возврат СоздатьКаталогЕслиЕгоНет(КаталогКонсоли1С + "WorkSpaces");
КонецФункции

&НаКлиенте
Функция ФайлыРабочаяОбласть(ПолноеИмя)
	Возврат СоздатьКаталогЕслиЕгоНет(ФайлыРабочиеОбласти() + Хеш(ПолноеИмя) + РазделительПути);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Функция ПереместитьКаталог(ПолноеИмяИсточник, ПолноеИмяПриемник)

	Файл = Новый Файл(ПолноеИмяПриемник);
	Если Файл.Существует() Тогда
		Если ПолноеИмяПриемник = ФайлыДеревоТемп Тогда
			Возврат Истина;
		КонецЕсли;
		Сообщить("Файл с именем: " + ПолноеИмяПриемник + " - уже существует!");
		Возврат Ложь;
	КонецЕсли;

	СоздатьКаталог(ПолноеИмяПриемник);
	МассивФайлов = НайтиФайлы(ПолноеИмяИсточник, "*", Истина);

	Для Каждого Файл Из МассивФайлов Цикл
		Если Файл.ЭтоКаталог() Тогда
			СоздатьКаталог(СтрЗаменить(Файл.ПолноеИмя, ПолноеИмяИсточник, ПолноеИмяПриемник));
		Иначе
			ПереместитьФайл(Файл.ПолноеИмя, СтрЗаменить(Файл.ПолноеИмя, ПолноеИмяИсточник, ПолноеИмяПриемник));
		КонецЕсли;
	КонецЦикла;

	Файл = Новый Файл(ПолноеИмяИсточник);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ПолноеИмяИсточник);
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиНедопустимыеСимволыВИмениФайла(ИмяФайла)

	НедопустимыеСимволы = ПолучитьНедопустимыеСимволыВИмениФайла();
	МассивНайденныхНедопустимыхСимволов = Новый Массив;

	Для ПозицияСимвола = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		ПроверяемыйСимвол = Сред(НедопустимыеСимволы, ПозицияСимвола, 1);
		Если СтрНайти(ИмяФайла, ПроверяемыйСимвол) <> 0 Тогда
			МассивНайденныхНедопустимыхСимволов.Добавить(ПроверяемыйСимвол);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивНайденныхНедопустимыхСимволов;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНедопустимыеСимволыВИмениФайла()

	НедопустимыеСимволы = """/\[]:;|=?*<>";
	НедопустимыеСимволы = НедопустимыеСимволы + Символы.Таб + Символы.ПС;
	Возврат НедопустимыеСимволы;

КонецФункции

&НаКлиенте
Функция ФайлыТекстЗапускаПоУмолчанию()

	Возврат "// Конфигураций может быть любое количество, имена конфигураций должны быть разными
			|// Структура конфигурации:
			|//  Имя - Строка - Имя конфигурации (всегда уникальное)
			|//  Тип - Строка - ""bsl"" встроенный язык 1С, ""qbsl"" запросы 1С, ""epf"" через обработку
			|//  Контекст - Строка - ""НаКлиенте"" или ""НаСервере"" (для типа ""epf"" выбор модуля исполнения)
			|//  Файл - Строка - абсолютный или относительный (через {ТекущаяПапка}) путь к файлу, для ""epf"" это модуль формы
			|//  ФайлМодульОбъекта - Строка - для типа ""epf"", то же что и ""файл""
			|//  ОткрытиеОбработки - Строка - для типа ""epf"", флаг указывающий, что форму нужно открыть
			|//  ИмяФормы - Строка - для типа ""epf"", имя формы для замены текста модуля
			|//  ИмяШаблонаОбработки - Строка - для типа ""epf"", полное имя произвольной обработки
			|//  ИмяГотовойОбработки - Строка - для типа ""epf"", возможность сохранить обработку в произвольное место
			|//  ВыгружатьШаблонОбработки - Булево - для типа ""epf"", если истина, выгружаем для каждого запуска, иначе один раз
			|//  МетодВхода - Строка - для типа ""epf"", метод входа , обязательно экспортный
			|//  ПараметрыМетодаВхода - Массив Из Произвольный - для типа ""epf"", произвольные параметры
			|//  ПараметрыОткрытия - Массив Из Произвольный - для типа ""epf"", параметры открытия формы
			|Запуск = Новый Структура(""Версия, Конфигурации"", ""0.3.2"", Новый Массив);
			|
			|Конфигурация = Новый Структура;
			|Конфигурация.Вставить(""Имя"", ""Выполнение кода 1С"");
			|Конфигурация.Вставить(""Тип"", ""epf"");
			|Конфигурация.Вставить(""Контекст"", ""НаКлиенте"");
			|Конфигурация.Вставить(""Файл"", ""{ТекущаяПапка}\Привет, мир.bsl"");
			|Конфигурация.Вставить(""ФайлМодульОбъекта"", ""{ТекущаяПапка}\Привет, мир.bsl"");
			|Конфигурация.Вставить(""ОткрытиеОбработки"", Ложь);
			|Конфигурация.Вставить(""ИмяФормы"", ""Форма"");
			|Конфигурация.Вставить(""ИмяШаблонаОбработки"", ""{ТекущаяПапка}\ИмяШаблонаОбработки.epf"");
			|Конфигурация.Вставить(""ИмяГотовойОбработки"", ""{ТекущаяПапка}\ИмяГотовойОбработки.epf"");
			|Конфигурация.Вставить(""ВыгружатьШаблонОбработки"", Ложь);
			|Конфигурация.Вставить(""МетодВхода"", ""Метод"");
			|Конфигурация.Вставить(""ПараметрыМетодаВхода"", Новый Массив);
			|//Конфигурация.ПараметрыМетодаВхода.Добавить(Неопределено);
			|Конфигурация.Вставить(""ПараметрыОткрытия"", Новый Структура);
			|//Конфигурация.ПараметрыОткрытия.Вставить("""", Неопределено);
			|Запуск.Конфигурации.Добавить(Конфигурация);";

КонецФункции

&НаКлиенте
Функция ФайлыТекстЗапускаПоУмолчаниюДобавочный()

	Возврат "Конфигурация = Новый Структура;
			|Конфигурация.Вставить(""Имя"", ""Выполнение кода 1С"");
			|Конфигурация.Вставить(""Тип"", ""epf"");
			|Конфигурация.Вставить(""Контекст"", ""НаКлиенте"");
			|Конфигурация.Вставить(""Файл"", ""{ТекущаяПапка}\Привет, мир.bsl"");
			|Конфигурация.Вставить(""ФайлМодульОбъекта"", ""{ТекущаяПапка}\Привет, мир.bsl"");
			|Конфигурация.Вставить(""ОткрытиеОбработки"", Ложь);
			|Конфигурация.Вставить(""ИмяФормы"", ""Форма"");
			|Конфигурация.Вставить(""ИмяШаблонаОбработки"", ""{ТекущаяПапка}\ШаблонОбработки.epf"");
			|Конфигурация.Вставить(""ИмяГотовойОбработки"", ""{ТекущаяПапка}\ИмяГотовойОбработки.epf"");
			|Конфигурация.Вставить(""ВыгружатьШаблонОбработки"", Ложь);
			|Конфигурация.Вставить(""МетодВхода"", ""Метод"");
			|Конфигурация.Вставить(""ПараметрыМетодаВхода"", Новый Массив);
			|//Конфигурация.ПараметрыМетодаВхода.Добавить(Неопределено);
			|Конфигурация.Вставить(""ПараметрыОткрытия"", Новый Структура);
			|//Конфигурация.ПараметрыОткрытия.Вставить("""", Неопределено);
			|Запуск.Конфигурации.Добавить(Конфигурация);";

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеРасширения

&НаКлиенте
Функция ОткрытьРасширение(МассивПутей)

	Перем ИмяРасширения;

	Для Каждого Путь Из МассивПутей Цикл

		Файл = Новый Файл(Путь);

		Если Файл.Существует() Тогда

			РасширениеДД = Новый ДвоичныеДанные(Файл.ПолноеИмя);

			Если НРег(Файл.Расширение) = ".erf" Тогда
				ИмяРасширения = ПодключитьОтчет(Путь, ПоместитьВоВременноеХранилище(РасширениеДД,
																					УникальныйИдентификатор));
			Иначе
				ИмяРасширения = ПодключитьОбработку(Путь, ПоместитьВоВременноеХранилище(РасширениеДД,
																						УникальныйИдентификатор));
			КонецЕсли;

			Прервать;

		КонецЕсли;

	КонецЦикла;

	Если ИмяРасширения = Неопределено Тогда
		ИмяРасширения = ИмяРасширенияНаСервере(МассивПутей);
	КонецЕсли;

	Если ИмяРасширения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Попытка
		Форма = ОткрытьФорму("ВнешняяОбработка." + ИмяРасширения + ".Форма", , ЭтаФорма, Истина);
	Исключение
		Форма = ОткрытьФорму("ВнешнийОтчет." + ИмяРасширения + ".Форма", , ЭтаФорма, Истина);
	КонецПопытки;

	Возврат Форма;

КонецФункции

&НаСервере
Функция ИмяРасширенияНаСервере(МассивПутей)

	Перем Макет;

	Для Каждого Путь Из МассивПутей Цикл

		Попытка
			Макет = ПолучитьМакет(Путь);
			Прервать;
		Исключение
			Продолжить;
		КонецПопытки;

	КонецЦикла;

	Если Макет <> Неопределено Тогда

		Если СтрЗаканчиваетсяНа(НРег(Путь), "erf") Тогда
			ИмяРасширения = ПодключитьОтчет(Путь, ПоместитьВоВременноеХранилище(Макет, УникальныйИдентификатор));
		Иначе
			ИмяРасширения = ПодключитьОбработку(Путь, ПоместитьВоВременноеХранилище(Макет, УникальныйИдентификатор));
		КонецЕсли;

		Возврат ИмяРасширения;

	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеГруппаСредняя

#Область СлужебныеГруппаВкладки

#Область ОсновнойИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Добавление

&НаКлиенте
Процедура ВкладкаОткрытьФайл(Файл, ТекстовыйДокумент = Неопределено)

	Если (ТекстовыйДокумент = Неопределено И ОткрытьФайлРасширением(Файл)) Или Не ВозможноОткрытьФайл(Файл) Тогда
		Возврат;
	КонецЕсли;

	Если ТекстовыйДокумент = Неопределено Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя, КодировкаТекста.UTF8);
	КонецЕсли;

	Вкладка = ВкладкаПоФайлПолноеИмя(Вкладки, Файл.ПолноеИмя);
	Если Вкладка = Неопределено Тогда
		Вкладка = ВкладкаДобавить(Ложь, Файл);
	КонецЕсли;

	Вкладка.КодТекст = ТекстовыйДокумент.ПолучитьТекст();
	Вкладка.КодОригинальныйТекст = Вкладка.КодТекст;
	Вкладка.КодНастройки = View().saveViewState();
	ВкладкаУстановитьРежимПоРасширению(Вкладка);

	ЗаписыватьПредыдущую = Вкладка <> ВкладкаТекущая(Вкладки);
	ВкладкаОткрыть(Вкладка, ЗаписыватьПредыдущую, Ложь);
	ВкладкаЗаписатьПриИзменении(Вкладка);

КонецПроцедуры

&НаКлиенте
Функция ВкладкаДобавить(Открывать = Истина, Файл = Неопределено, Индекс = Неопределено)

	Если Индекс = Неопределено Тогда
		Вкладка = Вкладки.Добавить();
	Иначе
		Вкладки.Удалить(Индекс);
		Вкладка = Вкладки.Вставить(Индекс);
	КонецЕсли;

	Вкладка.Порядок = Вкладки.Индекс(Вкладка);
	Вкладка.Имя = ВкладкаДобавитьНаСервере(Индекс);

	Если Файл <> Неопределено И Не ПустаяСтрока(Файл.Имя) Тогда
		Вкладка.Записана = Истина;
		ВкладкаЗаполнитьДанныеФайла(Вкладка, Файл);
	КонецЕсли;

	ВкладкаАрхивПолноеИмя(Вкладка);
	ВкладкаОбновитьЗаголовки(Элементы, Вкладка);

	Если Открывать Тогда
		ВкладкаОткрыть(Вкладка);
	КонецЕсли;

	Если Индекс = Неопределено Тогда
		ВкладкиЗаписать();
	КонецЕсли;

	Возврат Вкладка;

КонецФункции

&НаСервере
Функция ВкладкаДобавитьНаСервере(Индекс)

	Если Индекс = Неопределено Тогда
		Вкладка = Вкладки[Вкладки.Количество() - 1];
		Вкладка.Имя = УникальноеИмяВкладки();
	Иначе
		Вкладка = Вкладки.Получить(Индекс);
		Вкладка.Имя = "Вкладка" + Индекс;
	КонецЕсли;
	
	// Элемент страницы
	ВкладкаЭлемент = Элементы.Добавить(Вкладка.Имя, Тип("ГруппаФормы"), Элементы.СтраницыВкладки);
	ВкладкаЭлемент.Заголовок = "Новая вкладка";
	
	// Элемент декорация
	ВкладкаДекорация = Элементы.Добавить(Вкладка.Имя + "Декорация", Тип("ДекорацияФормы"), ВкладкаЭлемент);
	ВкладкаДекорация.Заголовок = "Новая вкладка";
	ВкладкаДекорация.Гиперссылка = Истина;
	ВкладкаДекорация.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ВкладкаДекорация.РастягиватьПоГоризонтали = Истина;
	ВкладкаДекорация.АвтоМаксимальнаяШирина = Ложь;
	ВкладкаДекорация.УстановитьДействие("Нажатие", "ВкладкаДекорацияНажатие");

	КнопкаЗакрыть = Элементы.Добавить("Закрыть" + ВкладкаДекорация.Имя,
									  Тип("КнопкаФормы"),
									  Элементы[ВкладкаДекорация.Имя + "КонтекстноеМеню"]);
	КнопкаЗакрыть.ИмяКоманды = "ВкладкиЗакрыть";
	КнопкаЗакрыть.Заголовок = "Закрыть вкладку";

	Возврат Вкладка.Имя;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Открытие

&НаКлиенте
Процедура ВкладкаОткрыть(Вкладка = Неопределено, ЗаписыватьПредыдущую = Истина, ВкладкиЗаписать = Истина)

	Если ЗаписыватьПредыдущую Тогда
		ЗагрузитьЗначенияВоВкладку(ВкладкаТекущая(Вкладки));
	КонецЕсли;

	Если Вкладка = Неопределено Тогда
		Вкладка = ВкладкаПоИмени(Вкладки, Элементы.СтраницыВкладки.ТекущаяСтраница.Имя);
	Иначе
		Элементы.СтраницыВкладки.ТекущаяСтраница = Элементы[Вкладка.Имя];
	КонецЕсли;

	ИмяСохраненногоФайла = Вкладка.ФайлПолноеИмя;
	УправлениеВидимостьюСравнения();

	Вкладка.История = ВкладкиИсторияМакс(Вкладки) + 1;
	ЗаполнитьЗначенияИзВкладки(Вкладка);
	ТекущийЭлемент = Элементы.ПолеHTML;

	Если ВкладкиЗаписать Тогда
		ВкладкиЗаписать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗначенияВоВкладку(Вкладка)
	
	// Загружаем значения во вкладку	
	Вкладка.КодТекст = ПолучитьТекст();
	Вкладка.КодОригинальныйТекст = ОригинальныйКод;
	Вкладка.КодНастройки = View().saveViewState();
	Вкладка.КодРежим = View().getCurrentLanguageId();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияИзВкладки(Вкладка)
	
	// Заполняем значениями из вкладки
	ВкладкаДействие = "ОткрытиеВкладки";
	ОчиститьТекст();
	ВкладкаДействие = "";

	Текст = Вкладка.КодТекст;

	ВкладкаДействие = "ОткрытиеВкладки";
	УстановитьТекст(Текст, Неопределено, Ложь);
	ВкладкаДействие = "";

	ОригинальныйКод = Вкладка.КодОригинальныйТекст;
	View().setOriginalText(ОригинальныйКод);

	Если View().getCurrentLanguageId() <> Вкладка.КодРежим Тогда
		Если Не ПустаяСтрока(Вкладка.КодРежим) Тогда
			View().setLanguageMode(Вкладка.КодРежим);
		Иначе
			View().setLanguageMode("bsl");
		КонецЕсли;
	КонецЕсли;

	View().restoreViewState(Вкладка.КодНастройки);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Запись

&НаКлиенте
Процедура ВкладкаСохранить(ФайлПолноеИмя = "")

	Если Не ПустаяСтрока(ФайлПолноеИмя) Тогда

		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ВкладкаЗначениеДляЗаписи());
		ТекстовыйДокумент.Записать(ФайлПолноеИмя, КодировкаТекста.UTF8, Символы.ПС);

		ВкладкаМодифицирована(Элементы, ВкладкаПоФайлПолноеИмя(Вкладки, ФайлПолноеИмя), Ложь);
		Возврат;

	КонецЕсли;

	Вкладка = ВкладкаТекущая(Вкладки);
	Если Не Вкладка.Записана Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВкладкаФильтрСохранения(Вкладка, Диалог);
		Если Диалог.Выбрать() Тогда
			Файл = Новый Файл(Диалог.ВыбранныеФайлы[0]);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Файл = Новый Файл(Вкладка.ФайлПолноеИмя);
	КонецЕсли;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ВкладкаЗначениеДляЗаписи());
	ТекстовыйДокумент.Записать(Файл.ПолноеИмя, КодировкаТекста.UTF8, Символы.ПС);

	Если Вкладка.Имя = "Вкладка0" Тогда
		ВкладкаОткрытьФайл(Файл);
		Возврат;
	КонецЕсли;

	Если Не Вкладка.Записана Тогда

		ВкладкаДубль = ВкладкаПоФайлПолноеИмя(Вкладки, Файл.ПолноеИмя);
		Если ВкладкаДубль <> Неопределено Тогда
			ВкладкаДубль.КодТекст = ВкладкаЗначениеДляЗаписи();
			ВкладкаЗакрыть();
			Вкладка = ВкладкаДубль;
			ВкладкаОткрыть(Вкладка);
		Иначе
			Вкладка.Записана = Истина;
			Вкладка.КодТекст = ВкладкаЗначениеДляЗаписи();
			ВкладкаЗаполнитьДанныеФайла(Вкладка, Файл);
			ВкладкаОбновитьЗаголовки(Элементы, Вкладка);
		КонецЕсли;

	КонецЕсли;

	ОригинальныйКод = Вкладка.КодТекст;
	Вкладка.КодОригинальныйТекст = ОригинальныйКод;
	View().setOriginalText(ОригинальныйКод);

	ВкладкаМодифицирована(Элементы, Вкладка, Ложь);
	ВкладкаЗаписатьПриИзменении(Вкладка);

КонецПроцедуры

&НаКлиенте
Функция ВкладкаЗначениеДляЗаписи()

	Возврат ПолучитьТекст();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Закрытие

&НаКлиенте
Функция ВкладкаЗакрыть(Вкладка = Неопределено, БезВопросов = Ложь, Открывать = Истина)

	Если Вкладка = Неопределено Тогда
		Вкладка = ВкладкаТекущая(Вкладки);
	КонецЕсли;

	Если Вкладка.Имя = "Вкладка0" Тогда
		Вкладка = ВкладкаПредыдущая(Вкладки);
		Если Вкладка = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Не БезВопросов И Вкладка.Модифицирована Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаОНесохраненнойВкладке", ЭтаФорма, Вкладка);
		ИмяНесохраненногоФайла = ?(ПустаяСтрока(Вкладка.ФайлИмя), "Новая вкладка", Вкладка.ФайлИмя);
		ТекстВопроса = "Файл: """ + ИмяНесохраненногоФайла + """ - не сохранен. Сохранить файл?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат Ложь;
	КонецЕсли;

	ПередЗакрытиемВкладки(Вкладка);
	Вкладки.Удалить(Вкладка);
	ВкладкаЗакрытьНаСервере(Вкладка.Имя);

	Если Открывать Тогда
		ВкладкаОткрыть(ВкладкаТекущая(Вкладки), Ложь);
	КонецЕсли;

	ВкладкиЗаписать();
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемВкладки(Вкладка)
	
	// Смещяем порядки
	УдаляемыйПорядок = Вкладка.Порядок;
	Для Каждого Строка Из Вкладки Цикл
		Если Строка.Порядок > УдаляемыйПорядок Тогда
			Строка.Порядок = Строка.Порядок - 1;
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем архив незаписанной вкладки
	Файл = Новый Файл(Вкладка.АрхивПолноеИмя);
	УдалитьФайлы(Файл.Путь);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаОНесохраненнойВкладке(Ответ, Вкладка) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВкладкаСохранить(Вкладка.ФайлПолноеИмя);
		ВкладкаЗакрыть(Вкладка);
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;

	ВкладкаЗакрыть(Вкладка, Истина);

КонецПроцедуры

&НаСервере
Процедура ВкладкаЗакрытьНаСервере(ВкладкаИмя)
	Элементы.Удалить(Элементы[ВкладкаИмя]);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Перемещение

&НаКлиенте
Процедура ВкладкаПереместить(ВкладкаИмя, Направление)

	ВкладкаПереместитьНаСервере(ВкладкаИмя, Направление);
	ВкладкиЗаписать();

КонецПроцедуры

&НаСервере
Процедура ВкладкаПереместитьНаСервере(ВкладкаИмя, Направление)

	Вкладка = ВкладкаПоИмени(Вкладки, ВкладкаИмя);
	Если Направление = "Налево" Тогда

		ВкладкаСдвиг = ВкладкаПоПорядок(Вкладки, Вкладка.Порядок - 1);
		Если ВкладкаСдвиг <> Неопределено И ВкладкаСдвиг.Имя <> "Вкладка0" Тогда
			Вкладка.Порядок = Вкладка.Порядок - 1;
			ВкладкаСдвиг.Порядок = ВкладкаСдвиг.Порядок + 1;
			Элементы.Переместить(Элементы[Вкладка.Имя], Элементы.СтраницыВкладки, Элементы[ВкладкаСдвиг.Имя]);
		КонецЕсли;

	Иначе

		ВкладкаСдвиг = ВкладкаПоПорядок(Вкладки, Вкладка.Порядок + 1);
		Если ВкладкаСдвиг <> Неопределено Тогда
			Вкладка.Порядок = Вкладка.Порядок + 1;
			ВкладкаСдвиг.Порядок = ВкладкаСдвиг.Порядок - 1;
			Элементы.Переместить(Элементы[ВкладкаСдвиг.Имя], Элементы.СтраницыВкладки, Элементы[Вкладка.Имя]);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Массовое закрытие

&НаКлиенте
Функция ВкладкиЗакрытьВсе()

	МассивИменВкладок = Новый Массив;
	Для Каждого ВкладкаЭлемент Из Элементы.СтраницыВкладки.ПодчиненныеЭлементы Цикл
		Если ВкладкаЭлемент.Имя = "Вкладка0" Тогда
			Продолжить;
		КонецЕсли;
		МассивИменВкладок.Добавить(ВкладкаЭлемент.Имя);
	КонецЦикла;

	Для Каждого ВкладкаЭлементИмя Из МассивИменВкладок Цикл
		Если Не ВкладкаЗакрыть(ВкладкаПоИмени(Вкладки, ВкладкаЭлементИмя), , Ложь) Тогда
			ВкладкаОткрыть(ВкладкаТекущая(Вкладки), Ложь);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	ВкладкаОткрыть(ВкладкаТекущая(Вкладки), Ложь);
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ВкладкиЗакрытьВсеСохраненные()

	МассивИменВкладок = Новый Массив;
	Для Каждого ВкладкаЭлемент Из Элементы.СтраницыВкладки.ПодчиненныеЭлементы Цикл
		Если ВкладкаЭлемент.Имя = "Вкладка0" Тогда
			Продолжить;
		КонецЕсли;
		МассивИменВкладок.Добавить(ВкладкаЭлемент.Имя);
	КонецЦикла;

	Для Каждого ВкладкаЭлементИмя Из МассивИменВкладок Цикл
		Вкладка = ВкладкаПоИмени(Вкладки, ВкладкаЭлементИмя);
		Если Не Вкладка.Модифицирована Тогда
			ВкладкаЗакрыть(Вкладка, , Ложь);
		КонецЕсли;
	КонецЦикла;

	ВкладкаОткрыть(ВкладкаТекущая(Вкладки), Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ВкладкиЗакрытьПапку(ПрочитатьВкладки = Истина)

	ВкладкиЗакрытьПапкуНаСервере();
	ВкладкиПриОткрытии(ПрочитатьВкладки);
	ВкладкаОткрыть(ВкладкаПоИмени(Вкладки, "Вкладка0"), Ложь);

КонецПроцедуры

&НаСервере
Процедура ВкладкиЗакрытьПапкуНаСервере()

	МассивИменВкладок = Новый Массив;
	Для Каждого ВкладкаЭлемент Из Элементы.СтраницыВкладки.ПодчиненныеЭлементы Цикл
		Если ВкладкаЭлемент.Имя = "Вкладка0" Тогда
			Продолжить;
		КонецЕсли;
		МассивИменВкладок.Добавить(ВкладкаЭлемент.Имя);
	КонецЦикла;

	Для Каждого ВкладкаЭлементИмя Из МассивИменВкладок Цикл
		Элементы.Удалить(Элементы[ВкладкаЭлементИмя]);
	КонецЦикла;

	Вкладки.Очистить();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие файлов расширением

&НаКлиенте
Функция ОткрытьФайлРасширением(Файл)
	
	Если Не Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьФормаФайлаОткрытогоРасширением(Файл) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Файл.Расширение = ".sel" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИмяФайла", Файл.ПолноеИмя);
		
		ОткрытьФорму("ВнешняяОбработка." + ИмяКонсолиЗапросов() + ".Форма.ФормаУпр", ПараметрыОткрытия, ЭтаФорма, Истина);
		
	ИначеЕсли Файл.Расширение = ".dcr" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИмяФайла", Файл.ПолноеИмя);
		
		ОткрытьФорму("ВнешнийОтчет." + ИмяКонсолиСКД() + ".Форма.Форма", ПараметрыОткрытия, ЭтаФорма, Истина);
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ИмяКонсолиЗапросов()

	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("КонсольЗапросов");
	Адрес = ПоместитьВоВременноеХранилище(Макет);
	
	Возврат ПодключитьОбработку("", Адрес, "УниформальнаяКонсольЗапросов");

КонецФункции

&НаСервере
Функция ИмяКонсолиСКД()

	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("КонсольСКД");
	Адрес = ПоместитьВоВременноеХранилище(Макет);
	
	Возврат ПодключитьОтчет("", Адрес);

КонецФункции

&НаКлиенте
Функция ЕстьФормаФайлаОткрытогоРасширением(Файл)

	Окна = ПолучитьОкна();

	Для Каждого ТекущееОкно Из Окна Цикл
		
		Если ТекущееОкно.Содержимое.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Поиск по заголовку, он должен включать в себя полное имя файла
		Если Найти(ТекущееОкно.Содержимое[0].Заголовок, Файл.ПолноеИмя) > 0 Тогда
			ТекущееОкно.Содержимое[0].Активизировать();
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область ЗаписьЧтение

&НаКлиенте
Функция ВкладкаЗаписатьПриИзменении(Вкладка)

	ВкладкиЗаписать();
	Возврат ВкладкаЗаписать(Вкладка);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс записи, чтения вкладок при открытии и изменении

&НаКлиенте
Процедура ВкладкиЗаписать()

	Файл = Новый Файл(ВкладкиКаталогДанных + "SavedTabData.xml");
	ВкладкиМассив = ВкладкиМассив(Вкладки);
	ЗаписатьФайлXML(Файл, ВкладкиМассив);

КонецПроцедуры

&НаКлиенте
Функция ВкладкиПрочитать()

	Файл = Новый Файл(ВкладкиКаталогДанных + "SavedTabData.xml");
	Если Не Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;

	ВкладкиМассив = ПрочитатьФайлXML(Файл);
	ВсегоВкладок = ВкладкиМассив.ВГраница();

	Для Инд = 1 По ВсегоВкладок Цикл
		Вкладка = Вкладки.Добавить();
	КонецЦикла;

	Для Инд = 0 По ВсегоВкладок Цикл

		СтруктураВкладки = ВкладкиМассив[Инд];

		Если Инд <> 0 Тогда
			СтруктураВкладки.Имя = "Вкладка" + Инд;
			Вкладка = ВкладкаДобавить(Ложь, Новый Файл(СтруктураВкладки.ФайлПолноеИмя), Инд);
			Вкладка.Модифицирована = Не СтруктураВкладки.Модифицирована;
			ВкладкаМодифицирована(Элементы, Вкладка, СтруктураВкладки.Модифицирована);
		Иначе
			Вкладка = ВкладкаПоИмени(Вкладки, "Вкладка0");
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(Вкладка, СтруктураВкладки);
		ВкладкаПрочитать(Вкладка);

	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ВкладкаЗаписать(Вкладка)

	Файл = Новый Файл(Вкладка.АрхивПолноеИмя);
	ЗаписатьФайлXML(Файл, ВкладкаСтруктура(Вкладка));

	Возврат Файл;

КонецФункции

&НаКлиенте
Процедура ВкладкаПрочитать(Вкладка)

	Файл = Новый Файл(Вкладка.АрхивПолноеИмя);
	ВкладкаСтруктура = ПрочитатьФайлXML(Файл);

	Если ВкладкаСтруктура = Неопределено Тогда
		Возврат;
	Иначе
		ЗаполнитьЗначенияСвойств(Вкладка, ВкладкаСтруктура);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ВкладкиПриОткрытии(ПрочитатьВкладки = Истина)

	ВкладкиКаталогДанных();
	ВкладкиДобавитьДом();

	Если ПрочитатьВкладки Тогда
		ВкладкиПрочитать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВкладкиКаталогДанных()

	Файл = Новый Файл(ФайлыРабочаяОбласть);
	Если Не ПустаяСтрока(ФайлыРабочаяОбласть) И Файл.Существует() Тогда
		Заголовок = ФайлыТекущаяПапка;
		Элементы.ГруппаФайлы.Доступность = Истина;
		Элементы.КоманднаяПанельФайлЗакрытьПапку.Видимость = Истина;
		ВкладкиКаталогДанных = СоздатьКаталогЕслиЕгоНет(ФайлыРабочаяОбласть + "Tabs" + ПолучитьРазделительПути());
	Иначе
		ФайлыТекущаяПапка = "";
		ФайлыРабочаяОбласть = "";
		Элементы.ГруппаФайлы.Доступность = Ложь;
		Элементы.КоманднаяПанельФайлЗакрытьПапку.Видимость = Ложь;
		ВкладкиКаталогДанных = СоздатьКаталогЕслиЕгоНет(КаталогКонсоли1С + "Tabs" + ПолучитьРазделительПути());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВкладкиДобавитьДом()

	Вкладка = Вкладки.Добавить();
	Вкладка.Имя = "Вкладка0";
	
	// Эксклюзивный архив для домашней вкладки, чтобы ничего никуда не терялось
	СтрокаДляХеша = Вкладка.Имя;
	Хеш = Хеш(СтрокаДляХеша);
	КаталогДанныхВкладки = СоздатьКаталогЕслиЕгоНет(КаталогКонсоли1С + "Tabs" + ПолучитьРазделительПути() + Хеш);
	Файл = Новый Файл(КаталогДанныхВкладки + Хеш);
	Вкладка.АрхивПолноеИмя = Файл.ПолноеИмя;

КонецПроцедуры

&НаКлиенте
Функция СоздатьКаталогЕслиЕгоНет(ПолноеИмя)

	Файл = Новый Файл(ПолноеИмя);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Файл.ПолноеИмя);
	КонецЕсли;

	Возврат Файл.ПолноеИмя + ПолучитьРазделительПути();

КонецФункции

&НаСервере
Функция УникальноеИмяВкладки()

	Для Инд = 1 По Вкладки.Количество() - 1 Цикл
		Если Элементы.Найти("Вкладка" + (Инд - 1)) = Неопределено Тогда
			Возврат "Вкладка" + (Инд - 1);
		КонецЕсли;
	КонецЦикла;

	Возврат "Вкладка" + (Инд - 1);

КонецФункции

&НаКлиенте
Функция ВкладкаАрхивПолноеИмя(Вкладка)

	Если Не Вкладка.Записана Тогда
		СтрокаДляХеша = Вкладка.Имя;
	Иначе
		СтрокаДляХеша = Вкладка.ФайлПолноеИмя;
	КонецЕсли;

	Хеш = Хеш(СтрокаДляХеша);
	КаталогДанныхВкладки = СоздатьКаталогЕслиЕгоНет(ВкладкиКаталогДанных + Хеш);
	Файл = Новый Файл(КаталогДанныхВкладки + Хеш);
	Вкладка.АрхивПолноеИмя = Файл.ПолноеИмя;

	Возврат Файл;

КонецФункции

&НаКлиенте
Процедура ВкладкаУстановитьРежимПоРасширению(Вкладка)

	Если Вкладка.ФайлРасширение = ".bsl"
		 Или Вкладка.ФайлРасширение = ".os"
		 Или Вкладка.ФайлРасширение = ".xbsl"
		 Или Вкладка.ФайлРасширение = ".kbsl" Тогда

		ВкладкаКодРежим = "bsl";
	ИначеЕсли Вкладка.ФайлРасширение = ".qbsl" Тогда
		ВкладкаКодРежим = "bsl_query";
	ИначеЕсли Вкладка.ФайлРасширение = ".xml" Тогда
		ВкладкаКодРежим = "xml";
	Иначе
		ВкладкаКодРежим = "plaintext";
	КонецЕсли;

	Вкладка.КодРежим = ВкладкаКодРежим;

КонецПроцедуры

&НаКлиенте
Функция ВозможноОткрытьФайл(Файл)

	Если Файл.Расширение = ".bsl"
		 Или Файл.Расширение = ".os"
		 Или Файл.Расширение = ".xbsl"
		 Или Файл.Расширение = ".kbsl"
		 Или Файл.Расширение = ".qbsl"
		 Или Файл.Расширение = ".xml"
		 Или Файл.Расширение = ".json"
		 Или Файл.Расширение = ".txt"
		 Или Файл.Расширение = "" Тогда

		Возврат Истина;

	Иначе
		Сообщить("Невозможно открыть файл!");
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВкладкаФильтрСохранения(Вкладка, Диалог)

	Если Не ПустаяСтрока(Вкладка.ФайлРасширение) Тогда
		ПредставлениеРасширения = ВРег(Сред(Вкладка.ФайлРасширение, 2));
		ВкладкаРасширение = Вкладка.ФайлРасширение;
	Иначе

		КодРежим = View().getCurrentLanguageId();
		Если КодРежим = "bsl" Тогда
			ФайлРасширение = "bsl";
		ИначеЕсли КодРежим = "bsl_query" Тогда
			ФайлРасширение = "qbsl";
		ИначеЕсли КодРежим = "xml" Тогда
			ФайлРасширение = "xml";
		Иначе
			ФайлРасширение = "txt";
		КонецЕсли;

		ПредставлениеРасширения = ВРег(ФайлРасширение);
		ВкладкаРасширение = ФайлРасширение;

	КонецЕсли;

	Диалог.Фильтр = ПредставлениеРасширения + "|*" + ВкладкаРасширение;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВкладкаЗаполнитьДанныеФайла(Вкладка, Файл)

	Вкладка.ФайлИмя = Файл.Имя;
	Вкладка.ФайлИмяБезРасширения = Файл.ИмяБезРасширения;
	Вкладка.ФайлПолноеИмя = Файл.ПолноеИмя;
	Вкладка.ФайлПуть = Файл.Путь;
	Вкладка.ФайлРасширение = Файл.Расширение;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВкладкаОбновитьЗаголовки(Элементы, Вкладка)

	Если Не Вкладка.Записана Тогда
		Элементы[Вкладка.Имя].Заголовок = "Новая вкладка";
		Элементы[Вкладка.Имя + "Декорация"].Заголовок = "Новая вкладка";
	Иначе
		Элементы[Вкладка.Имя].Заголовок = Вкладка.ФайлИмя;
		Элементы[Вкладка.Имя + "Декорация"].Заголовок = Вкладка.ФайлПолноеИмя;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВкладкаПоИмени(Знач Вкладки, Знач Имя)
	Возврат Вкладки.НайтиСтроки(Новый Структура("Имя", Имя))[0];
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВкладкаТекущая(Знач Вкладки)
	Возврат Вкладки.НайтиСтроки(Новый Структура("История", ВкладкиИсторияМакс(Вкладки)))[0];
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВкладкаПредыдущая(Знач Вкладки)

	ВкладкиИсторияПредМакс = ВкладкиИсторияПредМакс(Вкладки);
	Если ВкладкиИсторияПредМакс <> Неопределено Тогда
		Возврат Вкладки.НайтиСтроки(Новый Структура("История", ВкладкиИсторияПредМакс))[0];
	Иначе
		Возврат ВкладкиИсторияПредМакс;
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВкладкаПоПорядок(Знач Вкладки, Знач Порядок)

	Вкладки = Вкладки.НайтиСтроки(Новый Структура("Порядок", Порядок));
	Если Вкладки.Количество() > 0 Тогда
		Возврат Вкладки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВкладкаПоФайлПолноеИмя(Знач Вкладки, Знач ФайлПолноеИмя)

	Вкладки = Вкладки.НайтиСтроки(Новый Структура("ФайлПолноеИмя", ФайлПолноеИмя));
	Если Вкладки.Количество() > 0 Тогда
		Возврат Вкладки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВкладкаПоФайлИмяБезРасширения(Знач Вкладки, Знач ФайлИмяБезРасширения)

	Вкладки = Вкладки.НайтиСтроки(Новый Структура("ФайлИмяБезРасширения", ФайлИмяБезРасширения));
	Если Вкладки.Количество() > 0 Тогда
		Возврат Вкладки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ВкладкиМассив(Знач Вкладки)

	ИменаКолонок = "Имя, История, Модифицирована, Записана, Порядок, АрхивПолноеИмя, ФайлИмя, ФайлИмяБезРасширения, ФайлПолноеИмя, ФайлПуть, ФайлРасширение";
	ВкладкиТЗ = Вкладки.Выгрузить( , ИменаКолонок);
	ВкладкиМассив = Новый Массив;

	Для Инд = 0 По ВкладкиТЗ.Количество() - 1 Цикл
		Строка = ВкладкиТЗ.Найти(Инд, "Порядок");
		ВкладкиМассив.Добавить(СтрокаТаблицыЗначенийВСтруктуру(Строка));
	КонецЦикла;

	Возврат ВкладкиМассив;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВкладкаСтруктура(Знач Вкладка)

	ВкладкаСтруктура = Новый Структура;
	ВкладкиИменаКолонок = СтрРазделить("КодТекст, КодОригинальныйТекст, КодРежим, КодНастройки", ", ", Ложь);

	Для Каждого ИмяКолонки Из ВкладкиИменаКолонок Цикл
		ВкладкаСтруктура.Вставить(ИмяКолонки, Вкладка[ИмяКолонки]);
	КонецЦикла;

	Возврат ВкладкаСтруктура;

КонецФункции

&НаСервереБезКонтекста
Функция ВкладкиИсторияМакс(Знач Вкладки)

	Вкладки.Сортировать("История Убыв");
	Возврат Вкладки[0].История;

КонецФункции

&НаСервереБезКонтекста
Функция ВкладкиИсторияПредМакс(Знач Вкладки)

	Если Вкладки.Количество() > 1 Тогда
		Вкладки.Сортировать("История Убыв");
		Возврат Вкладки[1].История;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВкладкаМодифицирована(Знач Элементы, Знач Вкладка, ВкладкаМодифицирована)

	Если Вкладка.Имя = "Вкладка0" Тогда
		Возврат;
	КонецЕсли;

	Если Не Вкладка.Модифицирована И ВкладкаМодифицирована Тогда
		Элементы[Вкладка.Имя].Заголовок = Элементы[Вкладка.Имя].Заголовок + "  ●";
	ИначеЕсли Вкладка.Модифицирована И Не ВкладкаМодифицирована Тогда
		Элементы[Вкладка.Имя].Заголовок = СтрЗаменить(Элементы[Вкладка.Имя].Заголовок, "  ●", "");
	Иначе
		Возврат;
	КонецЕсли;

	Вкладка.Модифицирована = ВкладкаМодифицирована;	// На всякий случай •

КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений)

	Структура = Новый Структура;
	Для Каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;

	Возврат Структура;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеСтраницыКонсоли

////////////////////////////////////////////////////////////////////////////////
// Служебные обработчиков

#Область СлужебныеОбработчикиСобытийПоляРедактора

&НаКлиенте
Процедура ОбработатьСобытиеРедактора(Событие) Экспорт

	Если Событие <> Неопределено Тогда

		ИмяСобытия = Событие.event;

		Если ИмяСобытия = "EVENT_QUERY_CONSTRUCT" Тогда
			ВызватьКонструкторЗапроса(Событие.params);
		КонецЕсли;

		Если ИмяСобытия = "EVENT_FORMAT_CONSTRUCT" Тогда
			ВызватьКонструкторФорматнойСтроки(Событие.params);
		КонецЕсли;

		Если ИмяСобытия = "EVENT_GET_METADATA" Тогда
			ОбработкаСобытияПолученияМетаданных(Событие.params);
		КонецЕсли;

		Если ИмяСобытия = "EVENT_CONTENT_CHANGED" Тогда
			Если ВкладкаДействие <> "ОткрытиеВкладки" Тогда
				Вкладка = ВкладкаТекущая(Вкладки);
				ЗагрузитьЗначенияВоВкладку(Вкладка);
				ВкладкаМодифицирована(Элементы, Вкладка, Истина);
				ВкладкаЗаписатьПриИзменении(Вкладка);
			КонецЕсли;
		КонецЕсли;

		Если ИмяСобытия = "EVENT_ON_LINK_CLICK" Тогда
			Если 0 < СтрНайти(Событие.params.href, "e1cib") Тогда
				ПерейтиПоНавигационнойСсылке(Событие.params.href);
			КонецЕсли;
		КонецЕсли;

		Если ИмяСобытия = "EVENT_GET_VARIABLE_DATA" Тогда
			ОбработкаСобытияПолученияПеременной(Событие.params);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьВыборФайлаИСохранение(ЗавершениеРаботы) Экспорт

	ПараметрыОповещения = Новый Структура("ЗавершениеРаботы", ЗавершениеРаботы);
	Оповещение = Новый ОписаниеОповещения("ПриВыбореФайлаДляСохранения", ЭтаФорма, ПараметрыОповещения);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВкладкаФильтрСохранения(ВкладкаТекущая(Вкладки), ДиалогВыбора);
	ДиалогВыбора.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактора(Команда) Экспорт

	View().editor.trigger("", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаШаблонаЗавершение(Файлы, ДопПараметры) Экспорт

	Если Файлы <> Неопределено И 0 < Файлы.Количество() Тогда

		Файл = Новый ЧтениеТекста(Файлы[0], КодировкаТекста.UTF8);
		СтрокаШаблона = "";
		Строка = Файл.ПрочитатьСтроку();

		Пока Строка <> Неопределено Цикл
			СтрокаШаблона = СтрокаШаблона + Строка + Символы.ПС;
			Строка = Файл.ПрочитатьСтроку();
		КонецЦикла;

		Файл.Закрыть();
		View().parseSnippets(СтрокаШаблона);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СтруктураПодсказки(Имя, Текст, Тип, Описание, Документация) Экспорт

	Подсказка = Новый Структура;
	Подсказка.Вставить("name", Имя);
	Подсказка.Вставить("text", Текст);
	Подсказка.Вставить("kind", Тип);
	Подсказка.Вставить("detail", Описание);
	Подсказка.Вставить("documentation", Документация);

	Возврат Подсказка;

КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Произвольные

#Область ИнициализацияРедактора

&НаКлиенте
Функция ИндексныйФайл() Экспорт

	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";

КонецФункции

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт

	HTML = СкопированныйФайл;
	ИсходникиЗагружены = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт

	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + ВерсияОбработки + ".ver");
		Файл.ЗаписатьСтроку(ТекущаяДата());
		Файл.Закрыть();
		ТочкаВхода = КаталогИсходников + "index.html";
		ИндексныйФайл = ИндексныйФайл();
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтаФорма);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Исключение
		ВывестиОшибку("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки(), Истина);
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт

	Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтаФорма);
	ИмяФайла = КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ДанныеМакета.НачатьЗапись(Оповещение, ИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте() Экспорт

	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтаФорма);
	НачатьУдалениеФайлов(Оповещение, КаталогИсходников, "*.*");

КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт

	Если Существует Тогда
		ИндексныйФайл = ИндексныйФайл();
		ТочкаВхода = КаталогИсходников + "index.html";
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтаФорма);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт

	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтаФорма);
		ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт

	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтаФорма);
		ФайлНаДиске = Новый Файл(КаталогИсходников + ВерсияОбработки + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ВывестиОшибку("Не удалось создать каталог для исходников", Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт

	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтаФорма);
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт

	КаталогИсходников = ИмяКаталога + "bsl_console\";
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтаФорма);
	НачатьСозданиеКаталога(Оповещение, КаталогИсходников);

КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходники() Экспорт

#Если ВебКлиент Тогда
	HTML = "https://salexdv.github.io/bsl_console/src/index.html";
	ИсходникиЗагружены = Истина;
#Иначе
		Оповещение = Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтаФорма);
		НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
#КонецЕсли

КонецПроцедуры

&НаСервере
Функция СкопироватьОбработкуНаСервер(АдресОбработки) Экспорт
	
	//@skip-check missing-temporary-file-deletion
	ФайлОбработки = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресОбработки);
	ДвоичныеДанные.Записать(ФайлОбработки);

	Возврат ФайлОбработки;

КонецФункции

&НаКлиенте
Процедура ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, ДопПараметры) Экспорт

	Если Подключено Тогда

		УстановитьПометкуТемы("КоманднаяПанельВидСветлаяТема");
		УправлениеВозможностьюРедактирования();
		УправлениеЯзыкомПодсказок();
		ИзвлечьИсходники();

	Иначе

#Если ВебКлиент Тогда
		Если ДопПараметры = Неопределено Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеУстановкиРасширенияДляРаботыСФайлами", ЭтаФорма);
			НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
		Иначе
			ПоказатьПредупреждение( , "К сожалению работа в веб-клиенте невозможна!");
		КонецЕсли;
#КонецЕсли

	КонецЕсли
	;

КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширенияДляРаботыСФайлами(ДопПараметры) Экспорт

	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтаФорма, Истина);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура АктивироватьДополнительныеФункции() Экспорт

	Элементы.КоманднаяПанельФайлОтркрытьФайл.Доступность = Истина;
	Элементы.КоманднаяПанельФайлСохранить.Доступность = Истина;
	Элементы.КоманднаяПанельФайлСохранитьКак.Доступность = Истина;

	Элементы.КоманднаяПанельПравкаКонструкторЗапроса.Доступность = Истина;
	Элементы.КоманднаяПанельПравкаЗаменитьВхождения.Доступность = Истина;

	Элементы.КоманднаяПанельВидТолькоПросмотр.Доступность = Истина;
	Элементы.КоманднаяПанельВидБыстрыеПодсказки.Доступность = Истина;
	Элементы.КоманднаяПанельВидПодсвечиватьЗапросы.Доступность = Истина;
	Элементы.КоманднаяПанельВидКартаКода.Доступность = Истина;
	Элементы.КоманднаяПанельВидСтрокаСостояния.Доступность = Истина;
	Элементы.ПодменюПравкаПримеры.Доступность = Истина;

	Элементы.КоманднаяПанельПравкаКонструкторЗапроса.Доступность = Истина;
	Элементы.ПодменюВидТема.Доступность = Истина;
	Элементы.КоманднаяПанельВыполнитьВыполнитьНаКлиенте.Доступность = Истина;
	Элементы.КоманднаяПанельВыполнитьВыполнитьНаСервере.Доступность = Истина;
	Элементы.ПараметрыЗагрузитьОбщиеМодули.Доступность = Истина;
	Элементы.КоманднаяПанельПравкаСравнитьСОригиналом.Доступность = Истина;

	УправлениеБыстрымиПодсказками();
	УправлениеВидимостьюКартыКода();
	УправлениеВидимостьюСтрокиСостояния();
	УправлениеВидимостьюПробеловТабуляций();

	ПриПереключенииРежимаЗапроса();

КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьМетаданные() Экспорт

	View().clearMetadata();
	ОбновитьСписокОбщихМодулей();

КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРедактора() Экспорт

	Инфо = Новый СистемнаяИнформация;

	View().init(Инфо.ВерсияПриложения);
	View().setOption("autoResizeEditorLayout", Истина);
	View().setOption("renderQueryDelimiters", Истина);
	View().setOption("generateModificationEvent", Истина);
	View().hideScrollX();
	View().hideScrollY();

	ПодключитьОбработчикОжидания("ОбнулитьМетаданные", 1, Истина);

КонецПроцедуры

#КонецОбласти

#Область ПолучениеЗначенийПеременныхДляПодсказокПриНаведении

&НаСервереБезКонтекста
Функция ДополнитьСтроку(Знач Результат, СимволовДополнить, Дополнение = " ", Слева = Истина)

	Стр = "";

	Для Сч = 1 По СимволовДополнить Цикл
		Стр = Стр + Дополнение;
	КонецЦикла;

	Возврат ?(Слева, Стр + Результат, Результат + Стр);

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСсылка(Ссылка)

	ЭтоСсылка = Ложь;

	ТипЗнч = ТипЗнч(Ссылка);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч);

	Если ОбъектМетаданных <> Неопределено Тогда

		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		Массив = СтрРазделить(ПолноеИмя, ".");
		Массив[0] = Массив[0] + "Ссылка";
		ИмяТипа = СтрСоединить(Массив, ".");

		Попытка
			ЭтоСсылка = (ТипЗнч = Тип(ИмяТипа));
		Исключение
			ЭтоСсылка = Ложь;
		КонецПопытки;

	КонецЕсли;

	Возврат ЭтоСсылка;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяОбъектаМетаданных(Ссылка)

	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));

	Если ОбъектМетаданных <> Неопределено Тогда
		Возврат СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".").Получить(0);
	КонецЕсли;

	Возврат "";

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоТабличнаяЧасть(Ссылка)

	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));

	Если Результат <> Неопределено Тогда

		Если ОбъектМетаданныхИмеетТЧ(Результат.Родитель().ПолноеИмя()) Тогда
			Возврат Результат.Родитель().ТабличныеЧасти.Найти(Результат.Имя) <> Неопределено;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСтрокаТабличнойЧасти(Ссылка)

	ТипЗнч = ТипЗнч(Ссылка);
	Результат = Метаданные.НайтиПоТипу(ТипЗнч);

	Если Результат <> Неопределено Тогда

		Родитель = Результат.Родитель();
		ИмяРодителя = Родитель.ПолноеИмя();

		Если ОбъектМетаданныхИмеетТЧ(ИмяРодителя) Тогда

			ЧастиИмени = СтрРазделить(ИмяРодителя, ".");
			Имя1 = ЧастиИмени.Получить(0);
			Имя2 = ЧастиИмени.Получить(1);

			ТабличнаяЧасть = Родитель.ТабличныеЧасти.Найти(Результат.Имя);

			Если ТабличнаяЧасть <> Неопределено Тогда

				ИмяТипа = СтрШаблон("%1ТабличнаяЧастьСтрока.%2.%3", Имя1, Имя2, ТабличнаяЧасть.Имя);

				Попытка
					Возврат (ТипЗнч = Тип(ИмяТипа));
				Исключение
					Возврат Ложь;
				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЗаписьНабораЗаписей(Ссылка)

	ТипЗнч = ТипЗнч(Ссылка);
	Результат = Метаданные.НайтиПоТипу(ТипЗнч);

	Если Результат <> Неопределено Тогда

		ПолноеИмя = Результат.ПолноеИмя();

		Если 0 < СтрНайти(ПолноеИмя, "Регистр") Или 0 < СтрНайти(ПолноеИмя, "Register") Тогда

			ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
			Имя1 = ЧастиИмени.Получить(0);
			Имя2 = ЧастиИмени.Получить(1);
			ИмяТипа = СтрШаблон("%1Запись.%2", Имя1, Имя2);

			Попытка
				Возврат (ТипЗнч = Тип(ИмяТипа));
			Исключение
				Возврат Ложь;
			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыСтрокиТабличнойЧасти(Строка)

	Реквизиты = Новый Массив;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Строка));

	Если Результат <> Неопределено Тогда

		Родитель = Результат.Родитель();

		Если ОбъектМетаданныхИмеетТЧ(Родитель.ПолноеИмя()) Тогда

			ТабличнаяЧасть = Родитель.ТабличныеЧасти.Найти(Результат.Имя);

			Реквизиты.Добавить(Новый Структура("Имя", "НомерСтроки"));

			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				Реквизиты.Добавить(Реквизит);
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат Реквизиты;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыНабораЗаписей(Запись)

	Реквизиты = Новый Массив;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Запись));

	Если Результат <> Неопределено Тогда

		Для Каждого Измерение Из Результат.Измерения Цикл
			Реквизиты.Добавить(Измерение);
		КонецЦикла;

		Для Каждого Ресурс Из Результат.Ресурсы Цикл
			Реквизиты.Добавить(Ресурс);
		КонецЦикла;

		Для Каждого Реквизит Из Результат.Реквизиты Цикл
			Реквизиты.Добавить(Реквизит);
		КонецЦикла;
	КонецЕсли;

	Возврат Реквизиты;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМенеджерЗаписиРегистра(Значение)

	ЭтоМенеджерЗаписи = Ложь;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));

	Если Результат <> Неопределено Тогда

		Имя = Результат.ПолноеИмя();

		Если СтрНайти(Имя, "РегистрСведений") = 1 И Метаданные.РегистрыСведений.Содержит(Результат) Тогда
			ЭтоМенеджерЗаписи = (Тип("РегистрСведенийМенеджерЗаписи." + Результат.Имя) = ТипЗнч(Значение));
		Иначе
			ЭтоМенеджерЗаписи = Ложь;
		КонецЕсли;

	КонецЕсли;

	Возврат ЭтоМенеджерЗаписи;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоНаборЗаписейРегистра(Значение)

	ЭтоНаборЗаписей = Ложь;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));

	Если Результат <> Неопределено Тогда

		Имя = Результат.ПолноеИмя();

		Если СтрНайти(Имя, "РегистрСведений") = 1 И Метаданные.РегистрыСведений.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрСведенийНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрНакопления") = 1 И Метаданные.РегистрыНакопления.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрНакопленияНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрРасчета") = 1 И Метаданные.РегистрыРасчета.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрРасчетаНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрБухгалтери") = 1 И Метаданные.РегистрыБухгалтерии.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрБухгалтерииНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		Иначе
			ЭтоНаборЗаписей = Ложь;
		КонецЕсли;

	КонецЕсли;

	Возврат ЭтоНаборЗаписей;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПеречисление(Значение)

	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	Возврат Результат <> Неопределено И СтрНайти(Результат.ПолноеИмя(), "Перечисление") = 1;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСсылки(Значение, КешСсылок, HtmlTag)

	Представление = КешСсылок[Значение];

	Если Представление = Неопределено Тогда

		Попытка
			Если Не Значение.Пустая() Тогда
				Ссылка = ПолучитьНавигационнуюСсылку(Значение);
				Если HtmlTag Тогда
					Представление = СтрШаблон("<a href='%1'>%2</a>", Ссылка, Строка(Значение));
				Иначе
					Представление = СтрШаблон("[%1](%2)", Строка(Значение), Ссылка);
				КонецЕсли;
			Иначе
				Представление = "";
			КонецЕсли;
		Исключение
			//@skip-check bsl-legacy-check-static-feature-access
			Представление = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;

		КешСсылок[Значение] = Представление;

	КонецЕсли;

	Возврат Представление;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеТаблицыЗначений(Значение, Заголовок, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2):**", Заголовок, Значение.Количество()));
	Индекс = 0;

	Для Каждого СтрокаТЗ Из Значение Цикл

		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + "Строка: " + Индекс);

		Для Каждого Колонка Из Значение.Колонки Цикл
			Маркер = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
			МассивСтрок.Добавить(Маркер + Колонка.Имя + ": " + ПолучитьПредставлениеПеременной(СтрокаТЗ[Колонка.Имя],
																							   Смещение,
																							   КешСсылок));
		КонецЦикла;

		Индекс = Индекс + 1;

	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, СтрокаДерева, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	Индекс = 0;

	Для Каждого Строка Из СтрокаДерева.Строки Цикл

		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + "Строка: " + Индекс);

		Для Каждого Колонка Из Дерево.Колонки Цикл
			Маркер = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
			МассивСтрок.Добавить(Маркер + Колонка.Имя + ": " + ПолучитьПредставлениеПеременной(Строка[Колонка.Имя],
																							   Смещение,
																							   КешСсылок));
		КонецЦикла;

		Индекс = Индекс + 1;

		МассивСтрок.Добавить(ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, Строка, Смещение + 1, КешСсылок));

	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеДереваЗначений(Дерево, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2):**", "Дерево значений", Дерево.Строки.Количество()));
	МассивСтрок.Добавить(ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, Дерево, Смещение, КешСсылок));

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтрокиТаблицыЗначений(Значение, Смещение, КешСсылок)

	Таблица = Значение.Владелец();

	Представление = "**Строка таблицы значений:**" + Символы.ПС;

	Для Каждого Колонка Из Таблица.Колонки Цикл
		Представление = Представление + Символы.ПС;
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		Представление = Представление + Маркер + Колонка.Имя + ": ";
		Представление = Представление + ПолучитьПредставлениеПеременной(Значение[Колонка.Имя], Смещение, КешСсылок);
	КонецЦикла;

	Возврат Представление;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеМенеджераЗаписейРегистра(Значение, Смещение, КешСсылок)

	ТипЗнч = ТипЗнч(Значение);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч);
	МассивСтрок = Новый Массив;

	МассивСтрок.Добавить(СтрШаблон("**%1:**", ТипЗнч));
	МассивСтрок.Добавить(Символы.ПС);

	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя],
																							 Смещение,
																							 КешСсылок));
	КонецЦикла;

	Для Каждого Измерение Из ОбъектМетаданных.Реквизиты Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя],
																							 Смещение,
																							 КешСсылок));
	КонецЦикла;

	Для Каждого Измерение Из ОбъектМетаданных.Ресурсы Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя],
																							 Смещение,
																							 КешСсылок));
	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаЗначенийМассива(МассивСписок, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;

	ТипЗнч = ТипЗнч(МассивСписок);
	ЭтоМассив = (ТипЗнч = Тип("Массив"));
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2)**:", ТипЗнч, МассивСписок.Количество()) + Символы.ПС);
	Индекс = 0;

	Для Каждого Значение Из МассивСписок Цикл

		Маркер = ДополнитьСтроку("- (" + Индекс + ") ", Смещение * 4, " ");

		Если ЭтоМассив Тогда
			МассивСтрок.Добавить(Маркер + ПолучитьПредставлениеПеременной(Значение, Смещение, КешСсылок));
		Иначе
			МассивСтрок.Добавить(Маркер + ПолучитьПредставлениеПеременной(Значение.Значение, Смещение, КешСсылок));
		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЭлементаСпискаЗначений(ЭлементСписка, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("**Элемент списка значений**:");

	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	МассивСтрок.Добавить(Маркер + "Значение: " + ПолучитьПредставлениеПеременной(ЭлементСписка.Значение,
																				 Смещение,
																				 КешСсылок));

	Представление = ЭлементСписка.Представление;

	Если Не ЗначениеЗаполнено(Представление) Тогда
		Представление = Строка(ЭлементСписка.Значение);
	КонецЕсли;

	МассивСтрок.Добавить(Маркер + "Представление: " + Представление);
	МассивСтрок.Добавить(Маркер + "Пометка: " + ЭлементСписка.Пометка);

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеКлючаЗначения(КлючЗначение, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("**Ключ и значение**:");

	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	МассивСтрок.Добавить(Маркер + "Ключ: " + КлючЗначение.Ключ);
	МассивСтрок.Добавить(Маркер + "Значение: " + ПолучитьПредставлениеПеременной(КлючЗначение.Значение,
																				 Смещение,
																				 КешСсылок));

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтруктурыСоответствия(Значение, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2)**:", ТипЗнч(Значение), Значение.Количество()));

	Для Каждого Стр Из Значение Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Стр.Ключ + ": " + ПолучитьПредставлениеПеременной(Стр.Значение,
																						Смещение,
																						КешСсылок));
	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЗапроса(Запрос, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("**Запрос**:");

	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");

	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		МассивСтрок.Добавить(Маркер + "МенеджерВременныхТаблиц: Не установлен");
	Иначе
		МассивСтрок.Добавить(Маркер + "МенеджерВременныхТаблиц: Установлен");
	КонецЕсли;

	ПредставлениеПараметров = ПолучитьПредставлениеСтруктурыСоответствия(Запрос.Параметры, Смещение + 1, КешСсылок);
	МассивСтрок.Добавить(ПредставлениеПараметров);

	МаркерТекста = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
	МассивСтрок.Добавить(Маркер + "Текст: " + Символы.ПС + МаркерТекста + Запрос.Текст);

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПеременной(Значение, Знач Смещение, КешСсылок)

	Представление = "";
	ТипЗнч = ТипЗнч(Значение);

	Смещение = Смещение + 1;

	Если ТипЗнч = Тип("Число") Или ТипЗнч = Тип("Строка") Или ТипЗнч = Тип("Булево") Или ТипЗнч = Тип("Дата") Тогда
		Представление = Строка(Значение);
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
	ИначеЕсли ТипЗнч = Тип("Null") Тогда
		Представление = "Null";
	ИначеЕсли ТипЗнч = Тип("Структура") Или ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Представление = ПолучитьПредставлениеСтруктурыСоответствия(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("Массив") Или ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Представление = ПолучитьПредставлениеСпискаЗначенийМассива(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
		Представление = ПолучитьПредставлениеКлючаЗначения(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
		Представление = ПолучитьПредставлениеЭлементаСпискаЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
		//@skip-check bsl-nstr-string-literal-format
		Заголовок = НСтр("en = 'Value table'; ru = 'Таблица значений'");
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение, Заголовок, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
		Представление = ПолучитьПредставлениеДереваЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
		Представление = ПолучитьПредставлениеСтрокиТаблицыЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
		Представление = Строка(Значение);
	ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
		Представление = ПолучитьПредставлениеЗапроса(Значение, Смещение, КешСсылок);
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		Представление = Строка(Значение);
	ИначеЕсли ЭтоТабличнаяЧасть(Значение) Тогда
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение.Выгрузить(), ТипЗнч, Смещение, КешСсылок);
	ИначеЕсли ЭтоНаборЗаписейРегистра(Значение) Тогда
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение.Выгрузить(), ТипЗнч, Смещение, КешСсылок);
	ИначеЕсли ЭтоМенеджерЗаписиРегистра(Значение) Тогда
		Представление = ПолучитьПредставлениеМенеджераЗаписейРегистра(Значение, Смещение, КешСсылок);
	ИначеЕсли ЭтоСсылка(Значение) Тогда
		Представление = ПолучитьПредставлениеСсылки(Значение, КешСсылок, Ложь);
	Иначе
		Представление = Строка(Значение);
		Если ПустаяСтрока(Представление) Тогда
			Представление = Строка(ТипЗнч);
		КонецЕсли;
	КонецЕсли;

	Возврат Представление;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(ЗначенияПеременных)

	Описание = Новый Структура;
	КешСсылок = Новый Соответствие;

	Для Каждого Обход Из ЗначенияПеременных Цикл
		Представление = ПолучитьПредставлениеПеременной(Обход.Значение, -1, КешСсылок);
		Описание.Вставить(Обход.Ключ, Представление);
	КонецЦикла;

	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Описание);

	Возврат Запись.Закрыть();

КонецФункции

#КонецОбласти

#Область ПолучениеЗначенийПеременныхДляВыводаВТабло

&НаСервереБезКонтекста
Функция ПолучитьКартинкуДляПредставленияСсылки(Ссылка)

	ИмяОбъекта = ПолучитьИмяОбъектаМетаданных(Ссылка);

	Имена = Новый Соответствие;
	Имена.Вставить("Справочник", "catalog");
	Имена.Вставить("Catalog", "catalog");
	Имена.Вставить("Документ", "document");
	Имена.Вставить("Document", "document");
	Имена.Вставить("БизнесПроцесс", "bprocess");
	Имена.Вставить("BusinessProcess", "bprocess");
	Имена.Вставить("Задача", "task");
	Имена.Вставить("Task", "task");

	Картинка = Имена[ИмяОбъекта];

	Если Картинка = Неопределено Тогда
		Картинка = "structure";
	КонецЕсли;

	Возврат Картинка;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКраткуюСтруктуруПеременной(Значение, Имя, ПутьКДанным, КешСсылок)

	Представление = "";
	ТипЗнч = ТипЗнч(Значение);
	Картинка = "";
	Класс = "";

	Если ТипЗнч = Тип("Число") Тогда
		Представление = Строка(Значение);
		Картинка = "int";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Строка") Тогда
		Представление = Строка(Значение);
		Картинка = "string";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Булево") Тогда
		Представление = Строка(Значение);
		Картинка = "boolean";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Дата") Тогда
		Картинка = "date";
		Представление = Строка(Значение);
		Класс = "final";
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Null") Тогда
		Картинка = "null";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("УникальныйИдентификатор") Тогда
		Представление = Строка(Значение);
		Картинка = "uuid";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("ДвоичныеДанные") Тогда
		Картинка = "binary";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Картинка") Тогда
		Картинка = "picture";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Структура") Или ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "array";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("Массив") Или ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "array";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "keyvalue";
	ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "keyvalue";
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
		Картинка = "table";
	ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Строки.Количество());
		Картинка = "tree";
		Если Значение.Строки.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("СтрокаДереваЗначений") Тогда
		Картинка = "tree";
	ИначеЕсли ТипЗнч = Тип("КоллекцияСтрокДереваЗначений") Тогда
		Представление = "";
		Картинка = "tree";
	ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
		Картинка = "storage";
	ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "query";
	ИначеЕсли ТипЗнч = Тип("МенеджерВременныхТаблиц") Тогда
		Представление = "";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("КоллекцияДвижений") Тогда
		Представление = СтрШаблон("Движения (%1)", Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("ТабличныйДокумент") Тогда
		Картинка = "tabular";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("ТекстовыйДокумент")
			  Или ТипЗнч = Тип("ЧтениеТекста")
			  Или ТипЗнч = Тип("ЧтениеXML")
			  Или ТипЗнч = Тип("ЧтениеJSON")
			  Или ТипЗнч = Тип("ЧтениеHTML")
			  Или ТипЗнч = Тип("ЗаписьJSON")
			  Или ТипЗнч = Тип("ЗаписьXML")
			  Или ТипЗнч = Тип("ЗаписьТекста")
			  Или ТипЗнч = Тип("ЧтениеZipФайла")
			  Или ТипЗнч = Тип("Файл") Тогда
		Картинка = "text";
		Класс = "final";
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		Представление = Строка(Значение);
		Картинка = "enum";
		Класс = "final";
	ИначеЕсли ЭтоСтрокаТабличнойЧасти(Значение) Тогда
		Представление = "";
		Картинка = "table";
	ИначеЕсли ЭтоТабличнаяЧасть(Значение) Тогда
		Представление = СтрШаблон("Табличная часть (%1)", Значение.Количество());
		Картинка = "table";
	ИначеЕсли ЭтоЗаписьНабораЗаписей(Значение) Тогда
		Картинка = "table";
	ИначеЕсли ЭтоНаборЗаписейРегистра(Значение) Тогда
		Представление = СтрШаблон("Набор записей (%1)", Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ЭтоМенеджерЗаписиРегистра(Значение) Тогда
		Картинка = "structure";
	ИначеЕсли ЭтоСсылка(Значение) Тогда
		Представление = ПолучитьПредставлениеСсылки(Значение, КешСсылок, Истина);
		Если СтрНайти(Представление, "</a>") Тогда
			Представление = СтрЗаменить(Представление, """", "");
			Представление = СтрЗаменить(Представление, Символы.Таб, "");
		КонецЕсли;
		Картинка = ПолучитьКартинкуДляПредставленияСсылки(Значение);
	Иначе
		Попытка
			Представление = Строка(Значение);
		Исключение
			Представление = Строка(ТипЗнч);
		КонецПопытки;
		Класс = "final";
	КонецЕсли;

	Переменная = Новый Структура;
	Переменная.Вставить("label", Имя);
	Переменная.Вставить("value", Представление);
	Переменная.Вставить("type", Строка(ТипЗнч));
	Переменная.Вставить("path", ПутьКДанным);
	Переменная.Вставить("class", Класс);

	Если ЗначениеЗаполнено(Картинка) Тогда
		Переменная.Вставить("icon", Картинка + ".png");
	КонецЕсли;

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция НовыйИдентификаторПеременной()

	Возврат "var_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСсылочнойПеременной(Ссылка, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Ссылка, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	ОбъектМетаданных = Ссылка.Метаданные();
	ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();

	ЗначениеРеквизита = Ссылка.УникальныйИдентификатор();
	ПутьРеквизита = ПутьКДанным + ".УникальныйИдентификатор";
	ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита,
														 "УникальныйИдентификатор",
														 ПутьРеквизита,
														 КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);

	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмяОбъектаМетаданных) Тогда

		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл

			Если Реквизит.Имя <> "Ссылка" Тогда
				ЗначениеРеквизита = Ссылка[Реквизит.Имя];
				ПутьРеквизита = ПутьКДанным + "." + Реквизит.Имя;
				ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита,
																	 Реквизит.Имя,
																	 ПутьРеквизита,
																	 КешСсылок);
				ИдентификаторПеременной = НовыйИдентификаторПеременной();
				ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		ЗначениеРеквизита = Ссылка[Реквизит.Имя];
		ПутьРеквизита = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, Реквизит.Имя, ПутьРеквизита, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
	КонецЦикла;

	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмяОбъектаМетаданных) Тогда

		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ЗначениеРеквизита = Ссылка[ТабличнаяЧасть.Имя];
			ПутьРеквизита = ПутьКДанным + "." + ТабличнаяЧасть.Имя;
			ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита,
																 ТабличнаяЧасть.Имя,
																 ПутьРеквизита,
																 КешСсылок);
			ИдентификаторПеременной = НовыйИдентификаторПеременной();
			ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
		КонецЦикла;

	КонецЕсли;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТаблицыЗначений(ТаблицаЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(ТаблицаЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Индекс = 0;

	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаТЗ, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиТаблицыЗначений(СтрокаТаблицы, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаТаблицы, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Колонки = СтрокаТаблицы.Владелец().Колонки;

	Для Каждого Колонка Из Колонки Цикл
		ЗначениеКолонки = СтрокаТаблицы[Колонка.Имя];
		ПутьСтроки = ПутьКДанным + "." + Колонка.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Колонка.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиТабличнойЧасти(СтрокаТЧ, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаТЧ, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Реквизиты = ПолучитьРеквизитыСтрокиТабличнойЧасти(СтрокаТЧ);

	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = СтрокаТЧ[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЗаписиНабораЗаписей(Запись, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запись, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Реквизиты = ПолучитьРеквизитыНабораЗаписей(Запись);

	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = Запись[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеДереваЗначений(ДеревоЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(ДеревоЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Индекс = 0;

	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + ".Строки[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиДереваЗначений(СтрокаДерева, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Колонки = СтрокаДерева.Владелец().Колонки;

	Для Каждого Колонка Из Колонки Цикл
		ЗначениеКолонки = СтрокаДерева[Колонка.Имя];
		ПутьСтроки = ПутьКДанным + "." + Колонка.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Колонка.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;

	Если 0 < СтрокаДерева.Строки.Количество() Тогда
		ПутьСтроки = ПутьКДанным + ".Строки";
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева.Строки, "Строки", ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЕсли;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКоллекцииСтрокДереваЗначений(КоллекцияСтрок, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(КоллекцияСтрок, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Индекс = 0;

	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСоответствияСтруктуры(Соответствие, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Соответствие, ИмяПеременной, ПутьКДанным, КешСсылок);

	ЭтоСоответствие = (ТипЗнч(Соответствие) = Тип("Соответствие"));
	ДанныеПеременной = Новый Структура;

	Для Каждого Обход Из Соответствие Цикл

		Если ЭтоСоответствие Тогда
			ПутьЗначения = ПутьКДанным + "[&quote;" + Обход.Ключ + "&quote;]";
		Иначе
			ПутьЗначения = ПутьКДанным + "." + Обход.Ключ;
		КонецЕсли;

		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Обход.Ключ, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);

	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеМассива(Массив, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Массив, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;
	Индекс = 0;

	Для Каждого Значение Из Массив Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Значение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКлючаИЗначения(КлючЗначение, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Путь = ПутьКДанным + ".Ключ";
	Имя = "Ключ";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение.Ключ, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Путь = ПутьКДанным + ".Значение";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение.Значение, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЭлементаСпискаЗначений(ЭлементСписка, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Путь = ПутьКДанным + ".Значение";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Значение, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Путь = ПутьКДанным + ".Пометка";
	Имя = "Пометка";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Пометка, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Путь = ПутьКДанным + ".Представление";
	Имя = "Представление";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Представление, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСпискаЗначений(СписокЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СписокЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;
	Индекс = 0;

	Для Каждого Обход Из СписокЗначений Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКоллекцииДвижений(Движения, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Движения, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;
	Индекс = 0;

	Для Каждого Движение Из Движения Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Движение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеМенеджераЗаписейРегистра(Запись, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запись, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Реквизиты = ПолучитьРеквизитыНабораЗаписей(Запись);

	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = Запись[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЗапроса(Запрос, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запрос, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Путь = ПутьКДанным + ".Текст";
	Имя = "Текст";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.Текст, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Путь = ПутьКДанным + ".Параметры";
	Имя = "Параметры";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.Параметры, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Путь = ПутьКДанным + ".МенеджерВременныхТаблиц";
	Имя = "МенеджерВременныхТаблиц";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.МенеджерВременныхТаблиц, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеХранилищаЗначения(ХранилишеЗначения, ИмяПеременной, ПутьКДанным, КешСсылок)

	Данные = ХранилишеЗначения.Получить();

	Переменная = ПолучитьКраткуюСтруктуруПеременной(ХранилишеЗначения, ИмяПеременной, ПутьКДанным, КешСсылок);

	Путь = ПутьКДанным + ".Получить()";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Данные, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеХранилища = Новый Структура(ИдентификаторПеременной, ДанныеЗначения);

	Переменная.Вставить("children", ДанныеХранилища);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПеременной(ИдентификаторПеременной, ИмяПеременной, ПутьКДанным, АдресХраненияПеременных)

	Данные = ПолучитьИзВременногоХранилища(АдресХраненияПеременных);
	//@skip-check module-unused-local-variable
	ХранилищеПеременных = Данные.ХранилищеПеременных;
	КешСсылок = Данные.КэшСсылок;

	Попытка

		Описание = Неопределено;
		Путь = ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИдентификаторПеременной);
		Путь = СтрЗаменить(Путь, "&quote;", """");
		
		//@skip-check server-execution-safe-mode
		ЗначениеПеременной = Вычислить("ХранилищеПеременных." + Путь);
		Путь = СтрЗаменить(Путь, """", "&quote;");
		ТипЗнч = ТипЗнч(ЗначениеПеременной);

		Если ТипЗнч = Тип("ТаблицаЗначений") Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
			Описание = ПолучитьОписаниеСтрокиТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
			Описание = ПолучитьОписаниеДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СтрокаДереваЗначений") Тогда
			Описание = ПолучитьОписаниеСтрокиДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КоллекцияСтрокДереваЗначений") Тогда
			Описание = ПолучитьОписаниеКоллекцииСтрокДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Соответствие") Тогда
			Описание = ПолучитьОписаниеСоответствияСтруктуры(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Массив") Тогда
			Описание = ПолучитьОписаниеМассива(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Структура") Тогда
			Описание = ПолучитьОписаниеСоответствияСтруктуры(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
			Описание = ПолучитьОписаниеКлючаИЗначения(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СписокЗначений") Тогда
			Описание = ПолучитьОписаниеСпискаЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
			Описание = ПолучитьОписаниеЭлементаСпискаЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
			Описание = ПолучитьОписаниеЗапроса(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КоллекцияДвижений") Тогда
			Описание = ПолучитьОписаниеКоллекцииДвижений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
			Описание = ПолучитьОписаниеХранилищаЗначения(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоСсылка(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеСсылочнойПеременной(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоСтрокаТабличнойЧасти(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеСтрокиТабличнойЧасти(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоТабличнаяЧасть(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоЗаписьНабораЗаписей(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеЗаписиНабораЗаписей(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоНаборЗаписейРегистра(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоМенеджерЗаписиРегистра(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеМенеджераЗаписейРегистра(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		КонецЕсли;

		Если Описание <> Неопределено Тогда
			Результат = Новый Структура(ИдентификаторПеременной, Описание);
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Результат);
			Возврат Запись.Закрыть();
		Иначе
			ВызватьИсключение ("Неизвестный тип переменной");
		КонецЕсли;

		Данные.КэшСсылок = КешСсылок;
		ПоместитьВоВременноеХранилище(Данные, АдресХраненияПеременных);

	Исключение
		//@skip-check bsl-legacy-check-static-feature-access
		Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(Ошибка);
	КонецПопытки;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПеременныхДляВыводВТабло(ЗначенияПеременных, АдресХраненияПеременных)

	Описание = Новый Структура;
	КешСсылок = Новый Соответствие;
	ХранилищеПеременных = Новый Структура;

	Для Каждого Обход Из ЗначенияПеременных Цикл
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		Переменная = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Обход.Ключ, "", КешСсылок);
		Описание.Вставить(ИдентификаторПеременной, Переменная);
		ХранилищеПеременных.Вставить(ИдентификаторПеременной, Обход.Значение);
	КонецЦикла;

	Данные = Новый Структура;
	Данные.Вставить("ХранилищеПеременных", ХранилищеПеременных);
	Данные.Вставить("КэшСсылок", КешСсылок);

	АдресХраненияПеременных = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор);

	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Описание);

	Возврат Запись.Закрыть();

КонецФункции

#КонецОбласти

#Область ВыполнениеКода

&НаКлиенте
Функция ПолучитьОшибку(ОписаниеОшибки) Экспорт

	Ошибка = Новый Структура("ТекстОшибки, НомерСтроки, НомерКолонки", ОписаниеОшибки, 0, 1);

	ПозицияРазделителя = СтрНайти(ОписаниеОшибки, ":");

	Если 0 < ПозицияРазделителя Тогда

		Ошибка.ТекстОшибки = СокрЛП(Сред(ОписаниеОшибки, ПозицияРазделителя + 1));

		СтрокаОшибки = Лев(ОписаниеОшибки, ПозицияРазделителя - 1);
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "{", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "(", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ")", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "}", "");

		Подстроки = СтрЗаменить(СтрокаОшибки, ",", Символы.ПС);

		Ошибка.НомерСтроки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 1), 0);
		Ошибка.НомерКолонки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 2), 1);

	КонецЕсли;

	Возврат Ошибка;

КонецФункции

&НаКлиенте
Функция НайтиСтрокуВКоде(Строка) Экспорт

	НомерСтроки = View().findText(Строка);

	Возврат НомерСтроки;

КонецФункции

&НаКлиенте
Функция ИзвлечьНомерСтрокиИзОписанияОшибки(ОписаниеОшибки) Экспорт

	НомерСтроки = 0;
	ОткрывающаяСкобка = СтрНайти(ОписаниеОшибки, "(");

	Если 0 < ОткрывающаяСкобка Тогда

		ЗакрывающаяСкобка = СтрНайти(ОписаниеОшибки, ")", , ОткрывающаяСкобка);

		Если 0 < ЗакрывающаяСкобка Тогда

			Позиция = Сред(ОписаниеОшибки, ОткрывающаяСкобка + 1, ЗакрывающаяСкобка - ОткрывающаяСкобка - 1);
			Подстроки = СтрРазделить(Позиция, ",");

			Попытка
				НомерСтроки = Число(Подстроки[0]);
			Исключение
				НомерСтроки = 0;
			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

	Возврат НомерСтроки;

КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполнения(Результат) Экспорт

	View().setCustomCodeLenses("[]");

	Если Не Результат.Успешно Тогда

		Ошибка = ПолучитьОшибку(Результат.ОписаниеОшибки);

		НомерСтроки = Ошибка.НомерСтроки;
		НомерКолонки = Ошибка.НомерКолонки;

		Если НомерСтроки = 0 Тогда
			НомерСтроки = ИзвлечьНомерСтрокиИзОписанияОшибки(Результат.ОписаниеОшибки);
		КонецЕсли;

		Если НомерСтроки = 0 Тогда
			НомерСтроки = НайтиСтрокуВКоде(Результат.ИсходнаяСтрока);
		КонецЕсли;

		СообщитьПользователю(Ошибка.ТекстОшибки);

		Если 0 < НомерСтроки Тогда
			View().markError(НомерСтроки, НомерКолонки);
		КонецЕсли;

	Иначе

		АдресХраненияПеременных = Результат.АдресХраненияПеременных;

		Если ЗначениеЗаполнено(Результат.ОписаниеПеременных) Тогда

			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда

				View().showVariablesDescription(Результат.ОписаниеПеременных);

			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда

				View().setCustomHovers(Результат.ОписаниеПеременных);
			
				//Если Результат.ОписаниеПеременных <> "{}" Тогда
				//	View().setCustomCodeLenses("[{""lineNumber"": 1,""column"": 1,""text"": ""Для просмотра значений наведите курсор на переменную""}]");
				//КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруРезультата()

	СтруктуруРезультата = Новый Структура;
	СтруктуруРезультата.Вставить("Успешно", Ложь);
	СтруктуруРезультата.Вставить("ИсходнаяСтрока", "");
	СтруктуруРезультата.Вставить("ОписаниеОшибки", "");
	СтруктуруРезультата.Вставить("ОписаниеПеременных", "");
	СтруктуруРезультата.Вставить("АдресХраненияПеременных", "");

	Возврат СтруктуруРезультата;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьКод(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения, SPd201bf6_ЗамерПроизводительности)

	RVS6e6c2a = ПолучитьСтруктуруРезультата();
	SPd201bf6 = Новый Структура;

	Попытка
		SPd201bf6_ЗамерПроизводительности = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//@skip-check server-execution-safe-mode
		Выполнить(Текст);
		SPd201bf6_ЗамерПроизводительности = ТекущаяУниверсальнаяДатаВМиллисекундах() - SPd201bf6_ЗамерПроизводительности;
		RVS6e6c2a.Успешно = Истина;
		АдресПеременных = "";
		Попытка
			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьОписаниеПеременныхДляВыводВТабло(SPd201bf6, АдресПеременных);
			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(SPd201bf6);
			КонецЕсли;
			RVS6e6c2a.АдресХраненияПеременных = АдресПеременных;
		Исключение
			OS6e6c2a = ИнформацияОбОшибке();
			RVS6e6c2a.ОписаниеПеременных = "";
		КонецПопытки;
	Исключение
		OS6e6c2a = ИнформацияОбОшибке();
		RVS6e6c2a.ИсходнаяСтрока = OS6e6c2a.ИсходнаяСтрока;
		Если OS6e6c2a.Причина <> Неопределено Тогда
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Причина.Описание;
		Иначе
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Описание;
		КонецЕсли;
	КонецПопытки;

	Возврат RVS6e6c2a;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьКодНаСервере(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения, ЗамерПроизводительности)

	Возврат ВыполнитьКод(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения, ЗамерПроизводительности);

КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

&НаКлиенте
Функция View() Экспорт

	Возврат Элементы.ПолеHTML.Документ.defaultView;

КонецФункции

&НаКлиенте
Процедура УстановитьТекст(Текст, Позиция = Неопределено, УчитыватьОтступПервойСтроки = Ложь) Экспорт

	View().setText(Текст, Позиция, УчитыватьОтступПервойСтроки);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьКодПросмотраПеременных() Экспорт

	Код = "";

	Если 0 < ПоказыватьЗначенияПеременныхПослеВыполнения Тогда

		Переменные = View().getVarsNames();

		Если 0 < Переменные.length Тогда

			Для Индекс = 0 По Переменные.length - 1 Цикл

				Имя = Переменные["" + Индекс + ""];

				Если Найти(Имя, " ") > 0 Тогда
					Продолжить;
				КонецЕсли;

				Код = Код
					  + Символы.ПС
					  + "Попытка SPd201bf6.Вставить("""
					  + Имя
					  + """,Вычислить("""
					  + Имя
					  + """)); Исключение КонецПопытки;"
					  + Символы.ПС;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат Код;

КонецФункции

&НаКлиенте
Функция ПолучитьТекст(ДляВыполнения = Ложь) Экспорт

	Код = View().getText();

	Переменные = ?(ДляВыполнения, ПолучитьКодПросмотраПеременных(), "");

	Код = Код + Переменные;

	Возврат Код;

КонецФункции

&НаКлиенте
Функция ОчиститьТекст() Экспорт

	Возврат View().eraseText();

КонецФункции

#КонецОбласти

#Область КонструкторЗапросов

&НаКлиенте
Процедура ПриЗакрытииКонструктораЗапросов(Текст, ДопПараметры) Экспорт

	Если Текст <> Неопределено Тогда

		Если Не View().queryMode Тогда
			Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
			Текст = СтрЗаменить(Текст, """", """""");
			Текст = """" + Текст + """";
		КонецЕсли;

		Если ДопПараметры = Неопределено Тогда
			ОчиститьТекст();
		КонецЕсли;

		УстановитьТекст(Текст, ДопПараметры, Истина);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Текст, ДопПараметры) Экспорт

	Конструктор = Новый КонструкторЗапроса;

	Если ЗначениеЗаполнено(Текст) Тогда
		Попытка
			Конструктор.Текст = Текст;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение( , "Ошибка в тексте запроса:" + Символы.ПС + Инфо.Причина.Описание);
			Возврат;
		КонецПопытки;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапросов", ЭтаФорма, ДопПараметры);
	Конструктор.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовыйЗапрос(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторЗапроса("", Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПодготовитьТекстЗапроса(Текст) Экспорт

	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");

	Возврат ТекстЗапроса;

КонецФункции

&НаКлиенте
Процедура ВызватьКонструкторЗапроса(ПараметрыЗапроса) Экспорт

	Если ПараметрыЗапроса = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовыйЗапрос", ЭтаФорма);
		ТекстВопроса = "Не найден текст запроса." + Символы.ПС + "Создать новый запрос?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ТипЗнч(ПараметрыЗапроса) = Тип("Строка") Тогда
		ОткрытьКонструкторЗапроса(ПараметрыЗапроса, Неопределено);
	Иначе
		ТекстЗапроса = ПодготовитьТекстЗапроса(ПараметрыЗапроса.text);
		ОткрытьКонструкторЗапроса(ТекстЗапроса, ПараметрыЗапроса.range);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КонструкторФорматнойСтроки

&НаКлиенте
Процедура ПриЗакрытииКонструктораФорматнойСтроки(ФорматнаяСтрока, ДопПараметры) Экспорт

	Если ФорматнаяСтрока <> Неопределено Тогда
		ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "'", "");
		ФорматнаяСтрока = """" + ФорматнаяСтрока + """";
		УстановитьТекст(ФорматнаяСтрока, ДопПараметры, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ДопПараметры) Экспорт

	Конструктор = Новый КонструкторФорматнойСтроки;
	Попытка
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение( , "Ошибка в тексте форматной строки:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораФорматнойСтроки", ЭтаФорма, ДопПараметры);
	Конструктор.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовуюФорматнуюСтроку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторФорматнойСтроки("", Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВызватьКонструкторФорматнойСтроки(ПараметрыСтроки) Экспорт

	Если ПараметрыСтроки = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовуюФорматнуюСтроку", ЭтаФорма);
		ТекстВопроса = "Форматная строка не найдена." + Символы.ПС + "Создать новую форматную строку?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ПараметрыСтроки.range);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РежимРаботы

&НаКлиенте
Процедура ПриПереключенииРежимаЗапроса() Экспорт

	Если РежимЗапроса Тогда
		Элементы.КоманднаяПанельПравкаПереключениеРежимаЗапроса.Заголовок = "Переключить в режим редактирования кода";
	Иначе
		Элементы.КоманднаяПанельПравкаПереключениеРежимаЗапроса.Заголовок = "Переключить в режим редактирования запроса";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимЗапроса() Экспорт

	ПриПереключенииРежимаЗапроса();

	ИдентификаторРежима = ?(РежимЗапроса, "bsl_query", "bsl");

	View().setLanguageMode(ИдентификаторРежима);

	Если РежимЗапроса Тогда
		ТекстЗапроса = ПолучитьТекстМакета("МакетЗапроса", Ложь);
		View().updateText(ТекстЗапроса, Ложь, Ложь);
	Иначе
		View().updateText("", Ложь, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаменыКодаЗапросом(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПереключитьРежимЗапроса();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановление

&НаКлиенте
Процедура СохранитьКодВФайл() Экспорт

	Если ЗначениеЗаполнено(ИмяСохраненногоФайла) Тогда
		ЗаписатьКодВФайл(ИмяСохраненногоФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКодВФайл(ИмяФайла) Экспорт

	Текст = ПолучитьТекст();
	Файл = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8, "", Ложь, "");
	Файл.ЗаписатьСтроку(Текст);
	Файл.Закрыть();
	ОригинальныйКод = Текст;
	View().setOriginalText(ОригинальныйКод);
	УправлениеВидимостьюСравнения();

КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореФайлаДляСохранения(ВыбранныеФайлы, ДопПараметры) Экспорт

	Если ВыбранныеФайлы <> Неопределено Тогда

		ИмяСохраненногоФайла = ВыбранныеФайлы[0];
		ВкладкаСохранить(ИмяСохраненногоФайла);
		// ЗаписатьКодВФайл(ИмяСохраненногоФайла); // Сохранил на всякий случай

		Если ДопПараметры.ЗавершениеРаботы Тогда
			Закрыть();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЧтенияФайлаСКодомОригинал(ДопПараметры) Экспорт // Сохранил на всякий случай

	ОчиститьТекст();
	Текст = ДопПараметры.ПолучитьТекст();
	УстановитьТекст(Текст, Неопределено, Ложь);
	ОригинальныйКод = Текст;
	View().setOriginalText(ОригинальныйКод);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЧтенияФайлаСКодом(ДопПараметры) Экспорт
	ВкладкаОткрытьФайл(Новый Файл(ИмяСохраненногоФайла), ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСОригиналомЧтениеЗавершение(ДопПараметры) Экспорт

	Элементы.ПодменюПравкаСравнениеУправление.Видимость = Истина;
	КоманднаяПанель.Видимость = Ложь;
	View().compare(ДопПараметры.ПолучитьТекст(), Истина, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьКодИзСохраненногоФайла(ИмяФайла, ИмяОбработчика = "ПриЗавершенииЧтенияФайлаСКодом") Экспорт

	Файл = Новый ТекстовыйДокумент;
	Оповещение = Новый ОписаниеОповещения(ИмяОбработчика, ЭтаФорма, Файл);
	Файл.НачатьЧтение(Оповещение, ИмяСохраненногоФайла, КодировкаТекста.UTF8);

КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореФайлаДляЗагрузки(ВыбранныеФайлы, ДопПараметры) Экспорт

	Если ВыбранныеФайлы <> Неопределено Тогда
		ИмяСохраненногоФайла = ВыбранныеФайлы[0];
		ПрочитатьКодИзСохраненногоФайла(ИмяСохраненногоФайла);
		УправлениеВидимостьюСравнения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЕстьКод() Экспорт

	Возврат ЗначениеЗаполнено(СтрЗаменить(СокрЛП(ПолучитьТекст()), Символы.ПС, ""));

КонецФункции

&НаКлиенте
Процедура ЗагрузитьКодИзФайла() Экспорт

	Оповещение = Новый ОписаниеОповещения("ПриВыбореФайлаДляЗагрузки", ЭтаФорма);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаменыКодомИзФайла(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗагрузитьКодИзФайла();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДинамическоеОбновлениеМетаданных

&НаСервереБезКонтекста
Функция ОписатьОбщиеМодули(Коллекция, ФильтрГлобальный = Ложь)

	ОписаниеКоллекции = Новый Структура;

	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		Если ОбъектМетаданных.Глобальный = ФильтрГлобальный Тогда
			ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура);
		КонецЕсли;
	КонецЦикла;

	Возврат ОписаниеКоллекции;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоллекциюОбщихМодулей()

	КоллекцияОбщихМодулей = Новый Структура;
	КоллекцияОбщихМодулей.Вставить("Общие", ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Ложь));
	КоллекцияОбщихМодулей.Вставить("Глобальные", ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Истина));

	Возврат КоллекцияОбщихМодулей;

КонецФункции

&НаСервереБезКонтекста
Функция ИмяМетаданных(ПолноеИмя)

	Возврат СтрПолучитьСтроку(СтрЗаменить(ПолноеИмя, ".", Символы.ПС), 1);

КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя)

	Объекты = Новый Массив;
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");

	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетИзмерения(ПолноеИмя)

	Объекты = Новый Массив;
	Объекты.Добавить("РегистрСведений");
	Объекты.Добавить("РегистрНакопления");
	Объекты.Добавить("РегистрБухгалтерии");
	Объекты.Добавить("РегистрРасчета");

	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетТЧ(ПолноеИмя)

	Объекты = Новый Массив;
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("Отчет");
	Объекты.Добавить("Обработка");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");

	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя)

	Объекты = Новый Массив;
	Объекты.Добавить("Справочник");
	Объекты.Добавить("ПланСчетов");
	Объекты.Добавить("ПланВидовХарактеристик");
	Объекты.Добавить("ПланВидовРасчета");

	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция)

	ОписаниеКоллекции = Новый Структура;

	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура);
	КонецЦикла;

	Возврат ОписаниеКоллекции;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов)

	СоответствиеИмен = Новый Соответствие;
	СоответствиеИмен.Вставить("справочники", "catalogs");
	СоответствиеИмен.Вставить("catalogs", "catalogs");
	СоответствиеИмен.Вставить("документы", "documents");
	СоответствиеИмен.Вставить("documents", "documents");
	СоответствиеИмен.Вставить("регистрысведений", "infoRegs");
	СоответствиеИмен.Вставить("informationregisters", "infoRegs");
	СоответствиеИмен.Вставить("регистрынакопления", "accumRegs");
	СоответствиеИмен.Вставить("accumulationregisters", "accumRegs");
	СоответствиеИмен.Вставить("регистрыбухгалтерии", "accountRegs");
	СоответствиеИмен.Вставить("accountingregisters", "accountRegs");
	СоответствиеИмен.Вставить("регистрырасчета", "calcRegs");
	СоответствиеИмен.Вставить("calculationregisters", "calcRegs");
	СоответствиеИмен.Вставить("обработки", "dataProc");
	СоответствиеИмен.Вставить("dataprocessors", "dataProc");
	СоответствиеИмен.Вставить("отчеты", "reports");
	СоответствиеИмен.Вставить("reports", "reports");
	СоответствиеИмен.Вставить("перечисления", "enums");
	СоответствиеИмен.Вставить("enums", "enums");
	СоответствиеИмен.Вставить("планысчетов", "сhartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts", "сhartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы", "businessProcesses");
	СоответствиеИмен.Вставить("businessprocesses", "businessProcesses");
	СоответствиеИмен.Вставить("задачи", "tasks");
	СоответствиеИмен.Вставить("tasks", "tasks");
	СоответствиеИмен.Вставить("планыобмена", "exchangePlans");
	СоответствиеИмен.Вставить("exchangeplans", "exchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик", "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes", "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета", "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes", "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы", "constants");
	СоответствиеИмен.Вставить("constants", "constants");
	СоответствиеИмен.Вставить("внешниеисточникиданных", "externalDataSources");
	СоответствиеИмен.Вставить("externaldatasources", "externalDataSources");

	Возврат СоответствиеИмен[ТипОбъектов];

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(ТипОбъектов)

	СоответствиеИмен = Новый Соответствие;
	СоответствиеИмен.Вставить("справочники", "Catalogs");
	СоответствиеИмен.Вставить("catalogs", "Catalogs");
	СоответствиеИмен.Вставить("документы", "Documents");
	СоответствиеИмен.Вставить("documents", "Documents");
	СоответствиеИмен.Вставить("регистрысведений", "InformationRegisters");
	СоответствиеИмен.Вставить("informationregisters", "InformationRegisters");
	СоответствиеИмен.Вставить("регистрынакопления", "AccumulationRegisters");
	СоответствиеИмен.Вставить("accumulationregisters", "AccumulationRegisters");
	СоответствиеИмен.Вставить("регистрыбухгалтерии", "AccountingRegisters");
	СоответствиеИмен.Вставить("accountingregisters", "AccountingRegisters");
	СоответствиеИмен.Вставить("регистрырасчета", "CalculationRegisters");
	СоответствиеИмен.Вставить("calculationregisters", "CalculationRegisters");
	СоответствиеИмен.Вставить("обработки", "DataProcessors");
	СоответствиеИмен.Вставить("dataprocessors", "DataProcessors");
	СоответствиеИмен.Вставить("отчеты", "Reports");
	СоответствиеИмен.Вставить("reports", "Reports");
	СоответствиеИмен.Вставить("перечисления", "Enums");
	СоответствиеИмен.Вставить("enums", "Enums");
	СоответствиеИмен.Вставить("планысчетов", "ChartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts", "ChartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы", "BusinessProcesses");
	СоответствиеИмен.Вставить("businessprocesses", "BusinessProcesses");
	СоответствиеИмен.Вставить("задачи", "Tasks");
	СоответствиеИмен.Вставить("tasks", "Tasks");
	СоответствиеИмен.Вставить("планыобмена", "ExchangePlans");
	СоответствиеИмен.Вставить("exchangeplans", "ExchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик", "ChartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes", "ChartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета", "ChartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes", "ChartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы", "Constants");
	СоответствиеИмен.Вставить("constants", "Constants");

	Возврат СоответствиеИмен[ТипОбъектов];

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи)

	Связь = "";

	Типы = Реквизит.Тип.Типы();

	Индекс = 0;

	Пока Индекс < Типы.Количество() И Не ЗначениеЗаполнено(Связь) Цикл

		Тип = Типы[Индекс];

		СвязьТипа = Связи[Тип];

		Если СвязьТипа = Неопределено Тогда

			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);

			Если ОбъектМетаданных <> Неопределено Тогда
				
				// Сейчас связи описыватьются только для справочников и документов.
				// При желании, пожертвовав скоростью получения описания всех метаданных
				// сюда же можно добавить следующие элементы:
				// Метаданные.БизнесПроцессы businessProcesses
				// Метаданные.Задачи tasks
				// Метаданные.ПланыВидовРасчета chartsOfCalculationTypes
				// Метаданные.ПланыВидовХарактеристик chartsOfCharacteristicTypes
				// Метаданные.ПланыОбмена exchangePlans
				// Метаданные.ПланыСчетов сhartsOfAccounts
				Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					Связь = "catalogs." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					Связь = "documents." + ОбъектМетаданных.Имя;
				Иначе
					Связь = "";
				КонецЕсли;

			КонецЕсли;

			Связи[Тип] = Связь;

		Иначе

			Связь = СвязьТипа;

		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;

	Возврат Связь;

КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи)

	Связь = ?(Связи <> Неопределено, ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи), "");

	ОписаниеРеквизита = Новый Структура("name", Реквизит.Синоним);

	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;

	ОписаниеРеквизитов.Вставить(Реквизит.Имя, ОписаниеРеквизита);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданных(ТипОбъектов, АдресОбновления)

	ОписаниеМетаданных = "";

	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов);

	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда

		Коллекция = Метаданные[ТипОбъектов];

		СписокОбъектов = ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция);

		Файл = Новый ЗаписьJSON;
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СписокОбъектов);
		Исключение
			ВызватьИсключение ("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;

		ОписаниеМетаданных = Файл.Закрыть();

		АдресОбновления = ИмяКоллекции + ".items";

	КонецЕсли;

	Возврат ОписаниеМетаданных;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя)

	ТипРегистра = "";

	Если ИмяМетаданных(ПолноеИмя) = "РегистрСведений" Тогда

		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;

		Если ОбъектМетаданных.ПериодичностьРегистраСведений = Непериодический Тогда
			ТипРегистра = "nonperiodical";
		Иначе
			ТипРегистра = "periodical";
		КонецЕсли;

	ИначеЕсли ИмяМетаданных(ПолноеИмя) = "РегистрНакопления" Тогда

		Если ОбъектМетаданных.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ТипРегистра = "balance";
		Иначе
			ТипРегистра = "turnovers";
		КонецЕсли;

	Иначе

		ТипРегистра = "";

	КонецЕсли;

	Если ЗначениеЗаполнено(ТипРегистра) Тогда
		ДополнительныеСвойства.Вставить("type", ТипРегистра);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных)

	Если ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя) Тогда

		Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда

			Запрос = Новый Запрос("ВЫБРАТЬ
								  |	ТаблицаПланаСчетов.Код КАК Код,
								  |	ТаблицаПланаСчетов.ИмяПредопределенныхДанных КАК Имя
								  |ИЗ
								  |	&Таблица КАК ТаблицаПланаСчетов
								  |ГДЕ
								  |	ТаблицаПланаСчетов.Предопределенный");

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);

			Выборка = Запрос.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл
				ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
			КонецЦикла;

		Иначе

			Предопределенные = ОбъектМетаданных.ПолучитьИменаПредопределенных();

			Для Каждого Имя Из Предопределенные Цикл
				ОписаниеПредопределенных.Вставить(Имя, "");
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных,
											 ПолноеИмя,
											 ОписаниеРеквизитов,
											 ОписаниеРесурсов,
											 ДополнительныеСвойства,
											 Связи)

	Если ОбъектМетаданныхИмеетИзмерения(ПолноеИмя) Тогда

		Для НомерРеквизита = 0 По ОбъектМетаданных.Измерения.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Измерения.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;

		Для НомерРеквизита = 0 По ОбъектМетаданных.Ресурсы.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Ресурсы.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРесурсов, Реквизит, Связи);
		КонецЦикла;

		ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных,
										   ПолноеИмя,
										   ОписаниеРеквизитов,
										   ОписаниеТабличныхЧастей,
										   Связи)

	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмя) Тогда

		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл

			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: " + ТабличнаяЧасть.Синоним));

			ОписаниеТабличнойЧасти = Новый Структура;

			Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
				ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Имя, РеквизитТЧ.Синоним);
			КонецЦикла;

			Для НомерРеквизитаТЧ = 0 По ТабличнаяЧасть.Реквизиты.Количество() - 1 Цикл
				РеквизитТЧ = ТабличнаяЧасть.Реквизиты.Получить(НомерРеквизитаТЧ);
				ДобавитьОписаниеРеквизита(ОписаниеТабличнойЧасти, РеквизитТЧ, Связи);
			КонецЦикла;

			СтруктураТабличнойЧасти = Новый Структура;
			СтруктураТабличнойЧасти.Вставить("properties", ОписаниеТабличнойЧасти);

			Если 0 < ОписаниеТабличнойЧасти.Количество() Тогда
				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, СтруктураТабличнойЧасти);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи)

	Для НомерРеквизита = 0 По ОбъектМетаданных.Реквизиты.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.Реквизиты.Получить(НомерРеквизита);
		ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи)

	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя) Тогда

		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов)

	Для НомерРеквизита = 0 По ОбъектМетаданных.ЗначенияПеречисления.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.ЗначенияПеречисления.Получить(НомерРеквизита);
		ОписаниеРеквизитов.Вставить(Реквизит.Имя, Новый Структура("name", Реквизит.Синоним));
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных)

	СтруктураИсточника = Новый Структура;

	ОписаниеТаблиц = Новый Структура;

	Для Каждого Таблица Из ОбъектМетаданных.Таблицы Цикл

		ОбъектныеДанные = Метаданные.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные;
		ТипТаблицы = ?(Таблица.ТипДанныхТаблицы = ОбъектныеДанные, "ObjectData", "NonobjectData");

		СтруктураТаблицы = Новый Структура;
		СтруктураТаблицы.Вставить("tableDataType", ТипТаблицы);

		ПоляТаблицы = Новый Структура;
		Для Каждого Поле Из Таблица.Поля Цикл
			ПоляТаблицы.Вставить(Поле.Имя, Новый Структура("name", Поле.Синоним));
		КонецЦикла;

		СтруктураТаблицы.Вставить("properties", ПоляТаблицы);

		ОписаниеТаблиц.Вставить(Таблица.Имя, СтруктураТаблицы);

	КонецЦикла;

	СтруктураИсточника.Вставить("tables", Новый Структура("items", ОписаниеТаблиц));

	Возврат СтруктураИсточника;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных)

	СтруктураИсточника = ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных);
	Для Каждого Обход Из СтруктураИсточника Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя)

	ОписаниеРеквизитов = Новый Структура;
	ОписаниеРесурсов = Новый Структура;
	ОписаниеПредопределенных = Новый Структура;
	ОписаниеТабличныхЧастей = Новый Структура;
	ДополнительныеСвойства = Новый Структура;

	Связи = Новый Соответствие;

	Если ИмяМетаданных(ПолноеИмя) = "Перечисление" Тогда
		ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов);
	Иначе
		ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных);
		ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных,
										   ПолноеИмя,
										   ОписаниеРеквизитов,
										   ОписаниеРесурсов,
										   ДополнительныеСвойства,
										   Связи);
		ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных,
										 ПолноеИмя,
										 ОписаниеРеквизитов,
										 ОписаниеТабличныхЧастей,
										 Связи);
	КонецЕсли;

	СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);

	Для Каждого Обход Из ДополнительныеСвойства Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;

	Если 0 < ОписаниеРесурсов.Количество() Тогда
		СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
	КонецЕсли;

	Если 0 < ОписаниеПредопределенных.Количество() Тогда
		СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных);
	КонецЕсли;

	Если 0 < ОписаниеТабличныхЧастей.Количество() Тогда
		СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеОбъектаМетаданных(ТипОбъекта, АдресОбновления)

	ОписаниеМетаданных = "";

	Части = СтрРазделить(ТипОбъекта, ".");

	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(Части[0]);

	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда

		ОбъектМетаданных = Метаданные[Части[0]][Части[1]];
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();

		СтруктураОбъекта = Новый Структура;

		Если 0 < СтрНайти(ИмяМетаданных(ПолноеИмя), "ВнешнийИсточникДанных") Тогда
			ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных);
		Иначе
			ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя);
		КонецЕсли;

		Файл = Новый ЗаписьJSON;
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СтруктураОбъекта);
		Исключение
			ВызватьИсключение ("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;

		АдресОбновления = ИмяКоллекции + ".items." + ОбъектМетаданных.Имя;

		ОписаниеМетаданных = Файл.Закрыть();

	КонецЕсли;

	Возврат ОписаниеМетаданных;

КонецФункции

&НаКлиенте
Функция ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса) Экспорт

	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьОписаниеОбъектаМетаданных(ПараметрыЗапроса, АдресОбновления);

	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда

		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Функция ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса) Экспорт

	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьСписокОбъектовМетаданных(ПараметрыЗапроса, АдресОбновления);

	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда

		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ОбработкаСобытияПолученияМетаданных(Событие) Экспорт

	ПараметрыЗапроса = НРег(Событие.metadata);
	ДанныеОбновлены = Ложь;

	Если 0 < СтрНайти(ПараметрыЗапроса, ".") Тогда

		ЧастиЗапроса = СтрРазделить(ПараметрыЗапроса, ".");

		Если ЧастиЗапроса[0] = "module" Тогда

			Если ЧастиЗапроса.Количество() = 2 Тогда
				ДанныеОбновлены = ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(ЧастиЗапроса);
			Иначе
				ДанныеОбновлены = ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(ЧастиЗапроса);
			КонецЕсли;

		Иначе

			ДанныеОбновлены = ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса);

		КонецЕсли;

	Иначе

		ДанныеОбновлены = ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса);

	КонецЕсли;

	Если Событие.trigger = "suggestion" И ДанныеОбновлены Тогда
		View().triggerSuggestions();
	КонецЕсли;

	Если Событие.trigger = "snippet" Тогда
		View().updateSnippetByGUID(Событие.snippet_guid);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияПолученияПеременной(Событие) Экспорт

	ИмяПеременной = Событие.variableName;
	ИдентификаторПеременной = Событие.variableId;

	ПутьКДанным = Событие.variablePath;
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "undefined", "");

	Описание = ПолучитьОписаниеПеременной(ИдентификаторПеременной, ИмяПеременной, ПутьКДанным, АдресХраненияПеременных);

	Если ЗначениеЗаполнено(Описание) Тогда
		View().updateVariableDescription(ИдентификаторПеременной, Описание);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ИсходныйКод

&НаКлиенте
Процедура ВыборКаталогаИсходногоКодаЗавершение(Файлы, ДопПараметры) Экспорт

	Если Файлы <> Неопределено И 0 < Файлы.Количество() Тогда
		Объект.КаталогИсходногоКодаКонфигурации = Файлы[0];
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОбщихМодулейКлиент

&НаСервере
Функция СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей) Экспорт

	Файл = Новый ЗаписьJSON;
	Файл.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(Файл, КоллекцияОбщихМодулей.Общие);
	Исключение
		ВызватьИсключение ("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

	ЗначениеКоллекции = Файл.Закрыть();

	Возврат ПоместитьВоВременноеХранилище(ЗначениеКоллекции, Новый УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей) Экспорт
	
	// Соответствие между именем общего неглобального модуля в нижнем регистре
	// и именем модуля, как оно задано в конфигураторе для правильной загрузки
	// текстов общих модулей
	ОбщиеМодули = Новый Соответствие;

	Для Каждого Обход Из КоллекцияОбщихМодулей.Общие Цикл
		ОбщиеМодули.Вставить(НРег(Обход.Ключ), Обход.Ключ);
	КонецЦикла;

	ИменаОбщихМодулей = Новый ФиксированноеСоответствие(ОбщиеМодули);
	
	// Именя глобальных модулей для загрузки текстов
	Модули = Новый Массив;

	Для Каждого Обход Из КоллекцияОбщихМодулей.Глобальные Цикл
		Модули.Добавить(Обход.Ключ);
	КонецЦикла;

	ГлобальныйМодули = Новый ФиксированныйМассив(Модули);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьМодульИзИсходников(ПолноеИмяФайла) Экспорт

	СмещениеИмениВПути = 3;

	Путь = СтрРазделить(ПолноеИмяФайла, РазделительПути, Ложь);
	ИмяМодуля = Путь[Путь.Количество() - СмещениеИмениВПути];

	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПолноеИмяФайла);
	ТекстМодуля = Текст.ПолучитьТекст();

	Возврат Новый Структура("Имя, Текст", ИмяМодуля, ТекстМодуля);

КонецФункции

&НаКлиенте
Функция НормализоватьПуть(Путь) Экспорт

	Путь = СокрЛП(Путь);

	Если Прав(Путь, 1) <> РазделительПути Тогда
		Путь = Путь + РазделительПути;
	КонецЕсли;

	Возврат Путь;

КонецФункции

&НаКлиенте
Функция ПолучитьКаталогИсходногоКода() Экспорт

	КаталогИсходногоКода = Объект.КаталогИсходногоКодаКонфигурации;

	Если ЗначениеЗаполнено(КаталогИсходногоКода) Тогда
		КаталогИсходногоКода = НормализоватьПуть(КаталогИсходногоКода);
	КонецЕсли;

	Возврат КаталогИсходногоКода;

КонецФункции

&НаКлиенте
Процедура ВопросЗагрузкиОбщихМодулейЗавершение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда

		Состояние("Загрузка общих модулей...");
		Файлы = НайтиФайлы(ДопПараметры.КаталогМодулей, "Ext" + РазделительПути + "*.bsl", Истина);

		Для Каждого Файл Из Файлы Цикл
			ОбщийМодуль = ПолучитьМодульИзИсходников(Файл.ПолноеИмя);
			View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст);
		КонецЦикла;

		Состояние("Общие модули загружены");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Глобальный) Экспорт

	ЗагруженоФункций = 0;

	ИмяВКонфигураторе = ИменаОбщихМодулей.Получить(НРег(ИмяМодуля));

	Если ИмяВКонфигураторе = Неопределено Тогда
		ИмяВКонфигураторе = ИмяМодуля;
	КонецЕсли;

	ФайлМодуля = СтрШаблон("CommonModules%1%2%1Ext%1Module.bsl", РазделительПути, ИмяВКонфигураторе);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;

	ФайлНаДиске = Новый Файл(ФайлМодуля);

	Если ФайлНаДиске.Существует() Тогда
		ОбщийМодуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ЗагруженоФункций = View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст, Глобальный);
	КонецЕсли;

	Возврат ЗагруженоФункций;

КонецФункции

&НаКлиенте
Функция ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(КаталогИсходногоКода, СтруктураВыгрузки) Экспорт

	ЗагруженоФункций = 0;
	ТипМодуля = СтруктураВыгрузки.ТипМодуля;

	ИмяТипа = ?(ТипМодуля = "manager", "ManagerModule", "ObjectModule");

	ФайлМодуля = СтрШаблон("%1%2Ext%2%3.bsl", СтруктураВыгрузки.ИмяКаталога, РазделительПути, ИмяТипа);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;

	ФайлНаДиске = Новый Файл(ФайлМодуля);

	Если ФайлНаДиске.Существует() Тогда
		Модуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		АдресЗагрузки = СтрШаблон("%1.items.%2.%3", ИмяКоллекции, СтруктураВыгрузки.ИмяОбъектаМетаданных, ТипМодуля);
		ЗагруженоФункций = View().parseMetadataModule(Модуль.Текст, АдресЗагрузки);
	КонецЕсли;

	Возврат ЗагруженоФункций;

КонецФункции

&НаКлиенте
Процедура ЗагрузитьГлобальныеМодули() Экспорт

	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	ЕстьГлобальныеМодули = (ГлобальныйМодули <> Неопределено И 0 < ГлобальныйМодули.Количество());

	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЕстьГлобальныеМодули Тогда

		КаталогМодулей = КаталогИсходногоКода + "CommonModules";

		КаталогНаДиске = Новый Файл(КаталогМодулей);

		Если КаталогНаДиске.Существует() Тогда

			Индекс = 0;

			Пока Индекс < ГлобальныйМодули.Количество() Цикл
				ИмяМодуля = ГлобальныйМодули.Получить(Индекс);
				ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Истина);
				Индекс = Индекс + 1;
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(ЧастиЗапроса) Экспорт

	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 2;

	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда

		ИмяМодуля = ЧастиЗапроса[1];

		ЗагруженоФункций = ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Ложь);

		Если 0 < ЗагруженоФункций Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, РазделительПути)

	СтруктураВыгрузки.Вставить("ИмяКаталога", Неопределено);
	ЧастейМетаданных = 2;

	Попытка
		ПолноеИмя = Метаданные[СтруктураВыгрузки.ТипМетаданных][СтруктураВыгрузки.ОбъектМетаданных].ПолноеИмя();
	Исключение
		ПолноеИмя = "";
	КонецПопытки;

	Имена = СтрРазделить(ПолноеИмя, ".", Ложь);

	Если Имена.Количество() = ЧастейМетаданных Тогда

		КаталогТипа = ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);

		Если ЗначениеЗаполнено(КаталогТипа) Тогда
			ИндексОбъекта = 1;
			СтруктураВыгрузки.Вставить("ИмяОбъектаМетаданных", Имена[ИндексОбъекта]);
			СтруктураВыгрузки.ИмяКаталога = СтрШаблон("%1%2%3", КаталогТипа, РазделительПути, Имена[ИндексОбъекта]);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(ЧастиЗапроса) Экспорт

	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 4;

	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда

		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("ТипМодуля", ЧастиЗапроса[1]);
		СтруктураВыгрузки.Вставить("ТипМетаданных", ЧастиЗапроса[2]);
		СтруктураВыгрузки.Вставить("ОбъектМетаданных", ЧастиЗапроса[3]);

		ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, РазделительПути);

		Если ЗначениеЗаполнено(СтруктураВыгрузки.ИмяКаталога) Тогда

			ЗагруженоФункций = ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(КаталогИсходногоКода, СтруктураВыгрузки);

			Если 0 < ЗагруженоФункций Тогда
				Возврат Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ОбновитьСписокОбщихМодулей() Экспорт

	КоллекцияМетаданных = ПолучитьИзВременногоХранилища(АдресОбщихМодулей);

	Если КоллекцияМетаданных <> Неопределено Тогда
		View().updateMetadata(КоллекцияМетаданных, "commonModules.items");
		ЗагрузитьГлобальныеМодули();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(Значение, ЗначениеПоУмолчанию = 0)

	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	ТипЧисло = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);

	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, ЗначениеПоУмолчанию);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт

	Если ДопПараметры.ЗакрыватьКонсоль Тогда
		ЗакрытьКонсоль();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибку(Текст, ЗакрыватьКонсоль) Экспорт

	ПараметрыОповещения = Новый Структура("ЗакрыватьКонсоль", ЗакрыватьКонсоль);
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтаФорма, ПараметрыОповещения);
	ПоказатьПредупреждение(Оповещение, Текст);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеВозможностьюРедактирования() Экспорт

	Элементы.КоманднаяПанельВидТолькоПросмотр.Пометка = Не ТолькоПросмотр;

	ДоступностьКнопок = Не ТолькоПросмотр И ДокументЗагружен;
	Элементы.КоманднаяПанельПравкаКонструкторЗапроса.Доступность = ДоступностьКнопок;
	Элементы.КоманднаяПанельПравкаЗаменитьВхождения.Доступность = ДоступностьКнопок;

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЯзыкомПодсказок() Экспорт

	Если АнглийскийЯзык Тогда
		Элементы.КоманднаяПанельПравкаЯзыкПодсказок.Заголовок = "Переключить подсказки на русский язык";
	Иначе
		Элементы.КоманднаяПанельПравкаЯзыкПодсказок.Заголовок = "Переключить подсказки на английский язык";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРазделительПути() Экспорт

	РазделительПути = ПолучитьРазделительПути();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуТемы(Тема) Экспорт

	Для Каждого Элемент Из Элементы.ПодменюВидТема.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.Имя = Тема);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТемы() Экспорт

	ИмяТемы = Неопределено;

	Имена = Новый Соответствие;
	Имена.Вставить("КоманднаяПанельВидСветлаяТема", "bsl-white");
	Имена.Вставить("КоманднаяПанельВидТемнаяТема", "bsl-dark");

	Для Каждого Элемент Из Элементы.ПодменюВидТема.ПодчиненныеЭлементы Цикл
		Если Элемент.Пометка Тогда
			ИмяТемы = Имена[Элемент.Имя];
		КонецЕсли;
	КонецЦикла;

	Возврат ИмяТемы;

КонецФункции

&НаКлиенте
Функция ПолучитьИмяРежима(ИмяКоманды) Экспорт

	Имена = Новый Соответствие;
	Имена.Вставить("КоманднаяПанельВидРежимКода", "bsl");
	Имена.Вставить("КоманднаяПанельВидРежимЗапроса", "bsl_query");
	Имена.Вставить("КоманднаяПанельВидРежимXML", "xml");
	Имена.Вставить("КоманднаяПанельВидРежимПростойТекст", "plain_text");

	Возврат Имена[ИмяКоманды];

КонецФункции

&НаКлиенте
Процедура ПереключитьТему(Тема) Экспорт

	View().setTheme(Тема);

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежим(Режим) Экспорт

	View().setLanguageMode(Режим);

КонецПроцедуры

&НаСервере
Функция ЭтаФорма() Экспорт

	Возврат РеквизитФормыВЗначение("Объект");

КонецФункции

&НаСервере
Функция ПолучитьМакет(ИмяМакета) Экспорт

	Возврат ЭтаФорма().ПолучитьМакет(ИмяМакета);

КонецФункции

&НаСервере
Функция ПолучитьТекстМакета(ИмяМакета, УдалятьПереносыСтрок) Экспорт

	Макет = ПолучитьМакет(ИмяМакета);
	Текст = Макет.ПолучитьТекст();

	Если УдалятьПереносыСтрок Тогда
		Текст = СтрЗаменить(Текст, Символы.ПС, " ");
	КонецЕсли;

	Возврат Текст;

КонецФункции

&НаКлиенте
Функция ВебДокументДоступен() Экспорт

	Если Элементы.ПолеHTML.Документ <> Неопределено И Элементы.ПолеHTML.Документ.defaultView <> Неопределено Тогда
		Попытка
			ПолучитьТекст();
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ЗакрытьКонсоль() Экспорт

	ПараметрыЗакрытия = Новый Структура;
	Если Не ПустаяСтрока(ТекстПриОткрытии) Тогда
		Вкладка = ВкладкаПоИмени(Вкладки, ТекстПриОткрытии);
		ПараметрыЗакрытия.Вставить("Текст", ?(Вкладка = Неопределено, Неопределено, Вкладка.КодТекст));
		ВкладкаЗакрыть(Вкладка, Истина, Ложь);
		ТекстПриОткрытии = "";
	КонецЕсли;

	ИндексныйФайл = "";
	Закрыть(ПараметрыЗакрытия);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураРеквизита(Имя, Ссылка = Неопределено)

	Реквизит = Новый Структура;
	Реквизит.Вставить("name", Имя);

	Если Ссылка <> Неопределено Тогда
		Реквизит.Вставить("ref", Ссылка);
	КонецЕсли;

	Возврат Реквизит;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПользовательскиеОбъекты()

	Объекты = Неопределено;

	Если Метаданные.Справочники.Количество() <> 0 И Метаданные.Документы.Количество() <> 0 Тогда

		Объекты = Новый Структура;
		
		// Первый объект назовём "_СтруктураВыгрузки", у него будет 3 реквизита.
		// Реквизит "Номенклатура" будет ссылаться на соответствующий справочник,
		// если он есть, или на первый попавшийся справочник
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура);

		Справочник = Метаданные.Справочники.Найти("Номенклатура");
		Если Справочник = Неопределено Тогда
			Справочник = Метаданные.Справочники.Получить(0);
		КонецЕсли;
		
		// Ссылка на объект указывается как catalogs.ИмяСправочника или documents.ИмяДокумента
		// catalogs и documents - соответственно имена объектов, хранящих описание метаданных в файле bslMetadata.js
		// В модуле объекта есть функция ПолучитьСвязьСОбъектомМетаданных(Реквизит), которая принимает реквизит
		// Её достаточно просто модифицировать, чтобы она принимала, например, тип и сразу отдавала связь в нужном виде

		Реквизит = СтруктураРеквизита("Элемент номенклатуры", "catalogs." + Справочник.Имя);
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Реквизит);

		Реквизит = СтруктураРеквизита("Цена товара");
		ПользовательскийОбъект.properties.Вставить("Цена", Реквизит);

		Реквизит = СтруктураРеквизита("Остаток товара на складе");
		ПользовательскийОбъект.properties.Вставить("Остаток", Реквизит);

		Объекты.Вставить("_СтруктураВыгрузки", ПользовательскийОбъект);
		
		// Второй объект будет называться "_Партия", у него будет 3 реквизита,
		// два из которых "ПриходнаяНакладная" и "Номенклатура" будут ссылаться
		// на документ и справочник соотвественно
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура);

		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровУслуг");
		Если Документ = Неопределено Тогда
			Документ = Метаданные.Документы.Найти("ПоступлениеТоваров");
			Если Документ = Неопределено Тогда
				Документ = Метаданные.Документы.Получить(0);
			КонецЕсли;
		КонецЕсли;

		Реквизит = СтруктураРеквизита("Документ закупки", "documents." + Документ.Имя);
		ПользовательскийОбъект.properties.Вставить("ПриходнаяНакладная", Реквизит);

		Реквизит = СтруктураРеквизита("Элемент номенклатуры", "catalogs." + Справочник.Имя);
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Реквизит);

		Реквизит = Новый Структура("name", "Закупочная цена");
		ПользовательскийОбъект.properties.Вставить("Цена", Реквизит);

		Объекты.Вставить("_Партия", ПользовательскийОбъект);
		
		// Теперь загоняем наши объекты в JSON-строку
		Файл = Новый ЗаписьJSON;
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, Новый Структура("customObjects", Объекты));
			Объекты = Файл.Закрыть();
		Исключение
			СообщитьПользователю("Не удалось сохранить пользовательские объекты:" + Символы.ПС + ОписаниеОшибки());
			Объекты = Неопределено;
		КонецПопытки;

	КонецЕсли;

	Возврат Объекты;

КонецФункции

&НаКлиенте
Процедура УправлениеБыстрымиПодсказками() Экспорт

	Элементы.КоманднаяПанельВидБыстрыеПодсказки.Пометка = БыстрыеПодсказки;

КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКартыКода() Экспорт

	View().minimap(ВидимостьКартыКода);
	Элементы.КоманднаяПанельВидКартаКода.Пометка = ВидимостьКартыКода;

КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСтрокиСостояния() Экспорт

	Элементы.КоманднаяПанельВидСтрокаСостояния.Пометка = ВидимостьСтрокиСостояния;

	Если ВидимостьСтрокиСостояния Тогда
		View().showStatusBar();
	Иначе
		View().hideStatusBar();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюПробеловТабуляций() Экспорт

	Элементы.КоманднаяПанельВидОтображатьПробелыИТабуляции.Пометка = ОтображатьПробелыИТабуляции;
	View().renderWhitespace(ОтображатьПробелыИТабуляции);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСравнения() Экспорт

	Если Элементы.КоманднаяПанельПравкаОтключитьРежимСравнения.Видимость Тогда
		КоманднаяПанельПравкаОтключитьРежимСравнения(Команды.Найти("КоманднаяПанельПравкаОтключитьРежимСравнения"));
	КонецЕсли;

	Элементы.КоманднаяПанельПравкаСравнитьСОригиналом.Видимость = ЗначениеЗаполнено(ИмяСохраненногоФайла);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеСтраницыНижние
#КонецОбласти

#КонецОбласти

#Область СлужебныеСтраницыПравые

#Область СлужебныеСтраницаСинтаксПомощник

&НаКлиенте
Процедура СППриОткрытии()

	СПКорневойКаталог = СПКорневойКаталог();
	СПКаталог = СПКаталог();

	Файл = Новый Файл(СПКорневойКаталог + "V8Unpack.exe");
	Если Не Файл.Существует() Тогда
		СПВернутьФайлОбщегоМакета("V8Unpack").Записать(Файл.ПолноеИмя);
	КонецЕсли;

	Файл = Новый Файл(СПКорневойКаталог + "zlib1.dll");
	Если Не Файл.Существует() Тогда
		СПВернутьФайлОбщегоМакета("zlib1").Записать(Файл.ПолноеИмя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СПКорневойКаталог()

	Файл = Новый Файл(КаталогКонсоли1С + "SyntaxHelper" + РазделительПути);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Файл.ПолноеИмя);
	КонецЕсли;

	Возврат Файл.ПолноеИмя + ПолучитьРазделительПути();

КонецФункции

&НаКлиенте
Функция СПКаталог()

	СистемнаяИнформация = Новый СистемнаяИнформация;
	Файл = Новый Файл(СПКорневойКаталог + СистемнаяИнформация.ВерсияПриложения);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Файл.ПолноеИмя);
	КонецЕсли;

	Возврат Файл.ПолноеИмя + ПолучитьРазделительПути();

КонецФункции

&НаКлиенте
Процедура СПУдалитьКаталоги(Знач СПРабочийКаталог)
		
	// Удаляем служебные каталоги
	Каталог = Новый Файл(СПРабочийКаталог + "FileStorage");
	Если Каталог.Существует() Тогда
		Попытка
			УдалитьФайлы(СПРабочийКаталог + "FileStorage");
		Исключение
		КонецПопытки;
	КонецЕсли;

	Каталог = Новый Файл(СПРабочийКаталог + "IndexPackBlock");
	Если Каталог.Существует() Тогда
		Попытка
			УдалитьФайлы(СПРабочийКаталог + "IndexPackBlock");
		Исключение
		КонецПопытки;
	КонецЕсли;

	Каталог = Новый Файл(СПРабочийКаталог + "PackBlock");
	Если Каталог.Существует() Тогда
		Попытка
			УдалитьФайлы(СПРабочийКаталог + "PackBlock");
		Исключение
		КонецПопытки;
	КонецЕсли;

	Каталог = Новый Файл(СПРабочийКаталог + "source");
	Если Каталог.Существует() Тогда
		Попытка
			УдалитьФайлы(СПРабочийКаталог + "source");
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СППрочитать(ТМППутьКФайлу)

	Если ПустаяСтрока(ТМППутьКФайлу) Тогда
		Предупреждение("Не указан путь к справочному файлу (*.hbk)!");
		Возврат;
	КонецЕсли;

	Файл = Новый Файл(ТМППутьКФайлу);
	Если Не Файл.Существует() Тогда
		Предупреждение("Не найден справочный файл (" + ТМППутьКФайлу + ")!");
		Возврат;
	КонецЕсли;

	ИмяПодкаталога = "source";
	СПИмяФайлаСправки = Файл.ИмяБезРасширения;
	СПРабочийКаталог = СПКаталог + СПИмяФайлаСправки + ПолучитьРазделительПути();
	СоздатьКаталог(СПРабочийКаталог);
	СПУдалитьКаталоги(СПРабочийКаталог);
	
	// Проверяем, велась ли уже работа с этим файлом
	УжеРаспакованныйФайл = Новый Файл(СПРабочийКаталог + СПИмяФайлаСправки + ".hbk");
	ИзменятьРаспакованный = УжеРаспакованныйФайл.Существует();
	
	// Копируем оригинальный файл в рабочий каталог
	ОригинальныйФайл = Новый Файл(СПРабочийКаталог + "original.hbk");
	Если Не ОригинальныйФайл.Существует() Тогда // В этом случае оригинальный файл уже был скопирован
		КопироватьФайл(ТМППутьКФайлу, "" + СПРабочийКаталог + "original.hbk");
	КонецЕсли;

	Shell = Новый COMОбъект("WScript.Shell");

	Shell.Run(""
			  + СПКорневойКаталог
			  + "V8Unpack.exe -U "
			  + """"
			  + ?(ИзменятьРаспакованный, УжеРаспакованныйФайл.ПолноеИмя, ТМППутьКФайлу)
			  + """"
			  + " "
			  + СПРабочийКаталог
			  + ИмяПодкаталога, 0, Истина);
	
	// Записываем имя файла
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать("" + СПРабочийКаталог + ИмяПодкаталога + "\Book.data");
	СППространство = Сред(Текст.ПолучитьСтроку(1), 5);
	СППространство = Лев(СППространство, СтрДлина(СППространство) - 2);
	Представление = Сред(Текст.ПолучитьСтроку(3), 7);
	Представление = Лев(Представление, СтрДлина(Представление) - 2);
	
	// Создаем каталог FileStorage, там будем паковать и распаковывать файлы html
	КаталогFileStorage = СПКаталог + СПИмяФайлаСправки + "\FileStorage\";
	СоздатьКаталог(КаталогFileStorage);
	
	// В этот каталог сохраням архиваторы
	Файл = Новый Файл("" + КаталогFileStorage + "unzip.exe");
	Если Не Файл.Существует() Тогда
		СПВернутьФайлОбщегоМакета("unzip").Записать(Файл.ПолноеИмя);
	КонецЕсли;
	Файл = Новый Файл("" + КаталогFileStorage + "zip.exe");
	Если Не Файл.Существует() Тогда
		СПВернутьФайлОбщегоМакета("zip").Записать(Файл.ПолноеИмя);
	КонецЕсли;

	Shell.Run(""
			  + КаталогFileStorage
			  + "unzip.exe -o "
			  + СПРабочийКаталог
			  + ИмяПодкаталога
			  + "\PackBlock.data -d "
			  + СПРабочийКаталог
			  + "PackBlock", 0, Истина);

	СПАнализСтруктурыФайла(СПРабочийКаталог);

	Файл = Новый Файл(СПРабочийКаталог + ИмяПодкаталога + "\IndexPackBlock.data");
	Если Файл.Размер() > 0 Тогда
		Shell.Run(""
				  + КаталогFileStorage
				  + "unzip.exe -o "
				  + СПРабочийКаталог
				  + ИмяПодкаталога
				  + "\IndexPackBlock.data -d "
				  + СПРабочийКаталог
				  + "IndexPackBlock", 0, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СПАнализСтруктурыФайла(пРабочийКаталог)

	МассивФайлов = НайтиФайлы("" + пРабочийКаталог + "PackBlock", "*.*");
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(МассивФайлов[0].ПолноеИмя);

	ВсегоОбъектов = СтрЗаменить(Сред(Текст.ПолучитьСтроку(1), 2), "}", "");
	ВсегоОбъектов = Число(СтрЗаменить(ВсегоОбъектов, ",", ""));

	ВсегоСтрок = Текст.КоличествоСтрок();
	СледующийИндекс = 2;
	СоответствиеРодителей = Новый Соответствие;

	Пока СледующийИндекс < ВсегоСтрок Цикл

		СтрокаОбъекта = Текст.ПолучитьСтроку(СледующийИндекс);

		НомерЗапятой = Найти(СтрокаОбъекта, ",");
		Номер = Сред(Лев(СтрокаОбъекта, НомерЗапятой - 1), 2);

		СтрокаОбъекта = Сред(СтрокаОбъекта, НомерЗапятой + 1);
		НомерЗапятой = Найти(СтрокаОбъекта, ",");
		НомерРодителя = Лев(СтрокаОбъекта, НомерЗапятой - 1);

		СтрокаОбъекта = Сред(СтрокаОбъекта, НомерЗапятой + 1);
		НомерЗапятой = Найти(СтрокаОбъекта, ",");
		КоличествоПодчиненных = Число(Лев(СтрокаОбъекта, НомерЗапятой - 1));
		
		// Получаем атрибуты
		СтрокаПредставления = Текст.ПолучитьСтроку(СледующийИндекс + 3);
		ЭтоПапка = (Сред(СтрокаПредставления, 3, 1) = "#");
		Идентификатор = СтрокаПредставления;
		Если ЭтоПапка Тогда
			Идентификатор = Сред(Идентификатор, 7);
			Идентификатор = Лев(Идентификатор, СтрДлина(Идентификатор) - 2);
			АнглийскийИдентификатор = "";
		Иначе
			Идентификатор = Сред(Идентификатор, 8);
			Идентификатор = Лев(Идентификатор, СтрДлина(Идентификатор) - 3);
			АнглийскийИдентификатор = Сред(Текст.ПолучитьСтроку(СледующийИндекс + 4), 8);
			АнглийскийИдентификатор = Лев(АнглийскийИдентификатор, СтрДлина(АнглийскийИдентификатор) - 2);
		КонецЕсли;

		ИндексАдреса = ?(ЭтоПапка, СледующийИндекс + 4, СледующийИндекс + 5);
		ПутьКHTML = Сред(Текст.ПолучитьСтроку(ИндексАдреса), 4);
		ПутьКHTML = Лев(ПутьКHTML, СтрДлина(ПутьКHTML) - 2);

		СледующийИндекс = СледующийИндекс + ?(ЭтоПапка, 6, 7);

		Если НомерРодителя = "0" Тогда
			КоллекцияСтрок = СПДерево.ПолучитьЭлементы();
		Иначе
			КоллекцияСтрок = СоответствиеРодителей.Получить(НомерРодителя).ПолучитьЭлементы();
		КонецЕсли;

		СтрокаДерева = КоллекцияСтрок.Добавить();
		СтрокаДерева.Идентификатор = СтрЗаменить(Идентификатор, """" + """", """");
		СтрокаДерева.АнглийскийИдентификатор = СтрЗаменить(АнглийскийИдентификатор, """" + """", """");
		СтрокаДерева.ПутьКHTML = ПутьКHTML;
		СтрокаДерева.ЭтоПапка = ЭтоПапка;
		СтрокаДерева.ИмяФайлаСправки = СПИмяФайлаСправки;

		СПВычислитьИндексКартинки(СтрокаДерева, КоличествоПодчиненных);
		СоответствиеРодителей.Вставить(Номер, СтрокаДерева);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СПВычислитьИндексКартинки(пСтрокаДерева, пКоличествоПодчиненных = Неопределено)

	Если пКоличествоПодчиненных = Неопределено Тогда
		КоллекцияЭлементов = пСтрокаДерева.ПолучитьЭлементы();
		КоличествоПодчиненных = КоллекцияЭлементов.Количество();
	Иначе
		КоличествоПодчиненных = пКоличествоПодчиненных;
	КонецЕсли;

	Если пСтрокаДерева.ЭтоПапка
		 И Не ПустаяСтрока(пСтрокаДерева.ПутьКHTML)
		 Или КоличествоПодчиненных > 0
			 И Не пСтрокаДерева.ЭтоПапка Тогда
		пСтрокаДерева.Картинка = 0;
	ИначеЕсли пСтрокаДерева.ЭтоПапка И ПустаяСтрока(пСтрокаДерева.ПутьКHTML) Тогда
		пСтрокаДерева.Картинка = 1;
	Иначе
		пСтрокаДерева.Картинка = 2;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СПОтобразитьHTML(пПутьКHTML, ДобавитьИсторию = Истина)

	Если ДобавитьИсторию Тогда

		МассивИсторииКУдалению = Новый Массив;
		Для Каждого ЭлементИстории Из СПИстория Цикл
			Если СПИстория.Индекс(ЭлементИстории) > СПТекущийИндексИстории Тогда
				МассивИсторииКУдалению.Добавить(ЭлементИстории);
			КонецЕсли;
		КонецЦикла;

		Для Каждого ЭлементИстории Из МассивИсторииКУдалению Цикл
			СПИстория.Удалить(ЭлементИстории);
		КонецЦикла;

		ЭлементИстории = СПИстория.Добавить(пПутьКHTML, СПИмяФайлаСправки);
		СПТекущийИндексИстории = СПИстория.Индекс(ЭлементИстории);

	КонецЕсли;

	Если Не ПустаяСтрока(пПутьКHTML) Тогда
		
		// Извлекаем HTML
		СППутьКHTML = Сред(пПутьКHTML, 2);
		Файл = Новый Файл("" + СПКаталог + СПИмяФайлаСправки + "\FileStorage\" + СППутьКHTML);
		Если Не Файл.Существует() Тогда
			СПИзвлечьИзFileStorage(СППутьКHTML);
		КонецЕсли;
		Файл = Новый Файл("" + СПКаталог + СПИмяФайлаСправки + "\FileStorage\" + СППутьКHTML);
		Если Файл.Существует() Тогда
			СПHTML = Файл.ПолноеИмя;
			СППутьКHTMLФайлу = СППутьКHTML;
		Иначе
			// Какая-то ошибка извлечения
			СПHTML = "<HTML><HEAD><BODY>Не удалось распаковать файл " + пПутьКHTML + "</BODY></HEAD></HTML>";
		КонецЕсли;
		
		// Извлекаем st-файл
		СППутьКШаблону = СППолучитьПутьБезРасширения(СППутьКHTML) + ".st";
		Файл = Новый Файл("" + СПКаталог + СПИмяФайлаСправки + "\FileStorage\" + СППутьКШаблону);
		Если Не Файл.Существует() Тогда
			СПИзвлечьИзFileStorage(СППутьКШаблону);
		КонецЕсли;
	Иначе
		СПHTML = "<HTML><HEAD><BODY></BODY></HEAD></HTML>";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СПИзвлечьИзFileStorage(пПуть)
	
	// Распаковываем нужный архив
	Shell = Новый COMОбъект("WScript.Shell");
	КаталогFileStorage = СПКаталог + СПИмяФайлаСправки + "\FileStorage\";

	Shell.Run(КаталогFileStorage
			  + "unzip.exe -o "
			  + СПКаталог
			  + СПИмяФайлаСправки
			  + "\source\FileStorage.data"
			  + " "
			  + """"
			  + пПуть
			  + """"
			  + " -d "
			  + СПКаталог
			  + СПИмяФайлаСправки
			  + "\FileStorage", 0, Истина);

КонецПроцедуры

&НаКлиенте
Функция СППолучитьПутьБезРасширения(пПуть)

	Если Найти(пПуть, ".") > 0 Тогда
		Для й = -СтрДлина(пПуть) По -1 Цикл
			Если Сред(пПуть, -й, 1) = "." Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СППутьБезРасширения = Лев(пПуть, -й - 1);
	Иначе
		СППутьБезРасширения = пПуть;
	КонецЕсли;

	Возврат СППутьБезРасширения;

КонецФункции

&НаКлиенте
Функция СПНайтиВСправкеРекурсивно(Строки, Поиск)

	Для Каждого Строка Из Строки Цикл

		РезультатПоиска = СПНайтиВСправкеРекурсивно(Строка.ПолучитьЭлементы(), Поиск);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;

		Если Строка.ПутьКHTML = Поиск Тогда
			Возврат Строка.ПолучитьИдентификатор();
		КонецЕсли;

	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура СПОчиститьСтрокуПоиска()

	ТекущийЭлемент = Элементы.СППоиск;
	СПНажатьКлавишуПрограммно("^{BS}");

КонецПроцедуры

&НаКлиенте
Процедура СПНажатьКлавишуПрограммно(Текст)

	Шел = Новый COMОбъект("wScript.shell");
	Шел.SendKeys(Текст);
	Шел.SendKeys("{ENTER}");

КонецПроцедуры

&НаКлиенте
Функция СПВсеСимволыПеременной() Экспорт
	Возврат "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя0123456789_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
КонецФункции

&НаСервере
Функция СПВернутьФайлОбщегоМакета(пИмяМакета) Экспорт

	ВнешняяОбработка = РеквизитФормыВЗначение("Объект");
	Возврат ВнешняяОбработка.ПолучитьМакет(пИмяМакета);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

////////////////////////////////////////////////////////////////////////////////
// Каталоги

&НаКлиенте
Функция КаталогКонсоли1С() Экспорт

	КаталогКонсоли1С = КаталогДокументов() + "Console1C" + ПолучитьРазделительПути();
	Файл = Новый Файл(КаталогКонсоли1С);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(КаталогКонсоли1С);
	КонецЕсли;

	Возврат КаталогКонсоли1С;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФайлДанныхКонсоли1С(КаталогКонсоли1С) Экспорт
	Возврат Новый Файл(КаталогКонсоли1С + "DataConsole1C.xml");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сохраненные данные вкладок

&НаКлиенте
Функция ФайлДанныхВкладок() Экспорт
	Возврат Новый Файл(КаталогСохраненныхДанныхФайлов() + "SavedDataFiles.xml");
КонецФункции

&НаКлиенте
Функция КаталогСохраненныхДанныхФайлов() Экспорт

	КаталогСохраненныхДанныхФайлов = КаталогКонсоли1С + "SavedDataFiles";
	Файл = Новый Файл(КаталогСохраненныхДанныхФайлов);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(КаталогСохраненныхДанныхФайлов);
	КонецЕсли;

	Возврат КаталогСохраненныхДанныхФайлов + ПолучитьРазделительПути();

КонецФункции

&НаКлиенте
Функция КаталогСохраненныхДанныхФайла(ФайлПолноеИмя) Экспорт

	КаталогСохраненныхДанныхФайла = КаталогСохраненныхДанныхФайлов() + Хеш(ФайлПолноеИмя);
	Файл = Новый Файл(КаталогСохраненныхДанныхФайла);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(КаталогСохраненныхДанныхФайла);
	КонецЕсли;

	Возврат КаталогСохраненныхДанныхФайла + ПолучитьРазделительПути();

КонецФункции

&НаКлиенте
Функция ФайлСохраненныхДанных(ФайлПолноеИмя) Экспорт
	Возврат Новый Файл(КаталогСохраненныхДанныхФайла(ФайлПолноеИмя) + "Data.xml");
КонецФункции

&НаКлиенте
Функция ФайлТекста(ФайлПолноеИмя) Экспорт
	Возврат Новый Файл(КаталогСохраненныхДанныхФайла(ФайлПолноеИмя) + "Text.bsl");
КонецФункции

&НаКлиенте
Функция КаталогРабочихОбластей() Экспорт

	КаталогРабочихОбластей = КаталогКонсоли1С + "WorkSpaces";
	Файл = Новый Файл(КаталогРабочихОбластей);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(КаталогРабочихОбластей);
	КонецЕсли;

	Возврат КаталогРабочихОбластей + ПолучитьРазделительПути();

КонецФункции

&НаКлиенте
Функция КаталогРабочейОбласти(Путь) Экспорт

	КаталогРабочейОбласти = КаталогРабочихОбластей() + Хеш(Путь);
	Файл = Новый Файл(КаталогРабочейОбласти);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(КаталогРабочейОбласти);
	КонецЕсли;

	Возврат КаталогРабочейОбласти + ПолучитьРазделительПути();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Шел

&НаКлиенте
Процедура КомандаСистемыШел(Знач Команда, Знач ИмяКаталога = "", ОжидатьЗавершения = Истина)

	Шел = Новый COMОбъект("WScript.Shell");

	МассивПодстрок = СтрРазделить(ИмяКаталога, ":\", Ложь);
	Если МассивПодстрок.Количество() = 2 Тогда
		ИмяДиска = МассивПодстрок.Получить(0) + ":";
		КомандаСменитьКаталог = " " + ИмяДиска + " && " + " cd " + ИмяКаталога;
		Команда = КомандаСменитьКаталог + " && " + Команда;
	КонецЕсли;

	Команда = "cmd /c " + Команда;
	Шел.Run(Команда, 0, ОжидатьЗавершения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс

&НаКлиенте
Функция МодульВкладки(Знач ИмяБезРасширения, Сервер = Ложь, Обновлять = Истина) Экспорт

	Вкладка = ВкладкаПоФайлИмяБезРасширения(Вкладки, ИмяБезРасширения);

	Попытка

		Если Обновлять Тогда
			ИмитацияОшибки = 1 / 0;
		КонецЕсли;

		Форма = ПолучитьФорму("ВнешняяОбработка." + ИмяБезРасширения + ".ФормаОбъекта");

		Если Сервер Тогда
			Возврат ИмяБезРасширения;
		Иначе
			Возврат Форма;
		КонецЕсли;

	Исключение

		Если Сервер Тогда
			Возврат СформироватьОбработку(Новый Структура, Вкладка.КодТекст, , ИмяБезРасширения);
		Иначе
			ИмяОбработки = СформироватьОбработку(Новый Структура, , Вкладка.КодТекст, ИмяБезРасширения);
			Возврат ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".ФормаОбъекта");
		КонецЕсли;

	КонецПопытки;

КонецФункции

&НаКлиенте
Функция МодульФайла(Знач ПолноеИмя, Сервер = Ложь, Обновлять = Истина) Экспорт

	ПолноеИмя = СтрЗаменить(ПолноеИмя, "{ТекущаяПапка}", ФайлыТекущаяПапка);
	Файл = Новый Файл(ПолноеИмя);

	Попытка

		Если Обновлять Тогда
			ИмитацияОшибки = 1 / 0;
		КонецЕсли;

		Форма = ПолучитьФорму("ВнешняяОбработка." + Файл.ИмяБезРасширения + ".ФормаОбъекта", , ЭтаФорма);

		Если Сервер Тогда
			Возврат Файл.ИмяБезРасширения;
		Иначе
			Возврат Форма;
		КонецЕсли;

	Исключение

		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ПолноеИмя);
		Текст = Текст.ПолучитьТекст();

		Если Сервер Тогда
			Возврат СформироватьОбработку(Новый Структура, Текст, , Файл.ИмяБезРасширения);
		Иначе
			ИмяОбработки = СформироватьОбработку(Новый Структура, , Текст, Файл.ИмяБезРасширения);
			Возврат ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".ФормаОбъекта", , ЭтаФорма);
		КонецЕсли;

	КонецПопытки;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Замер производительности

&НаКлиенте
Функция ОбновитьЗамер()
	
	РезультатЗамера = ЗамерПроизводительности / 1000;
	Элементы.ДекорацияЗамерПроизводительности.Заголовок = "Замер: " + РезультатЗамера + " с";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервереБезКонтекста
Функция ПодключитьОбработку(ПолноеИмя, АдресРасширения, Знач ИмяОбработки = "")

	Если ПустаяСтрока(ИмяОбработки) Тогда
		ИмяОбработкиРезультат = "Code1C";
	Иначе
		Попытка
			Результат = Новый Структура(ИмяОбработки);
			ИмяОбработкиРезультат = ИмяОбработки;
		Исключение
			ИмяОбработкиРезультат = "Code1C";
		КонецПопытки;
	КонецЕсли;

	Попытка
		ВнешниеОбработки.Создать(ПолноеИмя, Ложь, Защита());
		ИмяОбработкиРезультат = ВнешниеОбработки.Подключить(АдресРасширения, ИмяОбработкиРезультат, Ложь, Защита());
	Исключение
		ИмяОбработкиРезультат = ВнешниеОбработки.Подключить(АдресРасширения, ИмяОбработкиРезультат, Ложь, Защита());
	КонецПопытки;

	Возврат ИмяОбработкиРезультат;

КонецФункции

&НаСервереБезКонтекста
Функция ПодключитьОтчет(ПолноеИмя, АдресРасширения)

	Попытка
		ВнешниеОтчеты.Создать(ПолноеИмя, Ложь, Защита());
		ИмяОтчета = ВнешниеОтчеты.Подключить(АдресРасширения, , Ложь, Защита());
	Исключение
		ИмяОтчета = ВнешниеОтчеты.Подключить(АдресРасширения, , Ложь, Защита());
	КонецПопытки;

	Возврат ИмяОтчета;

КонецФункции

&НаСервереБезКонтекста
Функция Защита()

	Защита = Новый ОписаниеЗащитыОтОпасныхДействий;
	Защита.ПредупреждатьОбОпасныхДействиях = Ложь;
	Возврат Защита;

КонецФункции

&НаКлиенте
Процедура ЗаписатьФайлXML(Файл, Данные) Экспорт

	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.ОткрытьФайл(Файл.ПолноеИмя);
	СериализаторXDTO.ЗаписатьXML(НоваяЗаписьXML, Данные);
	НоваяЗаписьXML.Закрыть();

КонецПроцедуры

&НаКлиенте
Функция ПрочитатьФайлXML(Файл) Экспорт

	Если Не Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовоеЧтениеXML = Новый ЧтениеXML;
	НовоеЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
	Данные = СериализаторXDTO.ПрочитатьXML(НовоеЧтениеXML);
	НовоеЧтениеXML.Закрыть();

	Возврат Данные;

КонецФункции

&НаСервереБезКонтекста
Функция Хеш(Строка)

	Хеш = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеш.Добавить(Строка);
	Возврат Хеш.ХешСумма;

КонецФункции

&НаСервере
Процедура УстановитьКонсольЗапросов(ОбработкаОбъект)

	Попытка
		
		//@skip-check module-unused-local-variable
		//@skip-check server-execution-safe-mode
		ПроверкаНаСовместимость = Вычислить("СтрРазделить("""", """")");

	Исключение

		КонсольЗапросовДД = ОбработкаОбъект.ПолучитьМакет("КонструкторЗапросов");
		ХранилищеКонсоли = ПоместитьВоВременноеХранилище(КонсольЗапросовДД, Новый УникальныйИдентификатор);

		ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
		ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
		ВнешниеОбработки.Подключить(ХранилищеКонсоли, "QueryWizard", Ложь, ОписаниеЗащиты);

	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#КонецОбласти